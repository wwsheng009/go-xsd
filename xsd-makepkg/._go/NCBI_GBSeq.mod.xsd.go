//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.ncbi.nlm.nih.gov/data_specs/schema/NCBI_GBSeq.mod.xsd
package go_NcbiGBSeqMod

import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type Xsd_Elem_GBSeqDivisionXsdtString0006 struct {
	GBSeqDivision xsdt.String `xml:"GBSeq_division"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqDivisionXsdtString0006 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqDivisionXsdtString0006 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqDivisionXsdtString0006 instance.
func (me *Xsd_Elem_GBSeqDivisionXsdtString0006) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqDivisionXsdtString0006; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBStrucCommentNameXsdtString0049 struct {
	GBStrucCommentName xsdt.String `xml:"GBStrucComment_name"`
}

//	If the WalkHandlers.Xsd_Elem_GBStrucCommentNameXsdtString0049 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBStrucCommentNameXsdtString0049 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBStrucCommentNameXsdtString0049 instance.
func (me *Xsd_Elem_GBStrucCommentNameXsdtString0049) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBStrucCommentNameXsdtString0049; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBStrucCommentItemTagXsdtString0051 struct {
	GBStrucCommentItemTag xsdt.String `xml:"GBStrucCommentItem_tag"`
}

//	If the WalkHandlers.Xsd_Elem_GBStrucCommentItemTagXsdtString0051 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBStrucCommentItemTagXsdtString0051 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBStrucCommentItemTagXsdtString0051 instance.
func (me *Xsd_Elem_GBStrucCommentItemTagXsdtString0051) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBStrucCommentItemTagXsdtString0051; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBStrucCommentItemValueXsdtString0052 struct {
	GBStrucCommentItemValue xsdt.String `xml:"GBStrucCommentItem_value"`
}

//	If the WalkHandlers.Xsd_Elem_GBStrucCommentItemValueXsdtString0052 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBStrucCommentItemValueXsdtString0052 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBStrucCommentItemValueXsdtString0052 instance.
func (me *Xsd_Elem_GBStrucCommentItemValueXsdtString0052) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBStrucCommentItemValueXsdtString0052; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBStrucCommentItemUrlXsdtString0053 struct {
	GBStrucCommentItemUrl xsdt.String `xml:"GBStrucCommentItem_url"`
}

//	If the WalkHandlers.Xsd_Elem_GBStrucCommentItemUrlXsdtString0053 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBStrucCommentItemUrlXsdtString0053 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBStrucCommentItemUrlXsdtString0053 instance.
func (me *Xsd_Elem_GBStrucCommentItemUrlXsdtString0053) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBStrucCommentItemUrlXsdtString0053; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBStrucCommentItem struct {
	Xsd_Elem_GBStrucCommentItemTagXsdtString0051

	Xsd_Elem_GBStrucCommentItemValueXsdtString0052

	Xsd_Elem_GBStrucCommentItemUrlXsdtString0053
}

//	If the WalkHandlers.TxsdGBStrucCommentItem function is not nil (ie. was set by outside code), calls it with this TxsdGBStrucCommentItem instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGBStrucCommentItem instance.
func (me *TxsdGBStrucCommentItem) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBStrucCommentItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elem_GBStrucCommentItemTagXsdtString0051.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBStrucCommentItemValueXsdtString0052.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBStrucCommentItemUrlXsdtString0053.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBStrucCommentItem struct {
	GBStrucCommentItems []*TxsdGBStrucCommentItem `xml:"GBStrucCommentItem"`
}

//	If the WalkHandlers.Xsd_Elems_GBStrucCommentItem function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBStrucCommentItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBStrucCommentItem instance.
func (me *Xsd_Elems_GBStrucCommentItem) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBStrucCommentItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBStrucCommentItems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBStrucCommentItems struct {
	Xsd_Elems_GBStrucCommentItem
}

//	If the WalkHandlers.TxsdGBStrucCommentItems function is not nil (ie. was set by outside code), calls it with this TxsdGBStrucCommentItems instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBStrucCommentItems instance.
func (me *TxsdGBStrucCommentItems) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBStrucCommentItems; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBStrucCommentItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBStrucCommentItemsTxsdGBStrucCommentItems0050 struct {
	GBStrucCommentItems *TxsdGBStrucCommentItems `xml:"GBStrucComment_items"`
}

//	If the WalkHandlers.Xsd_Elem_GBStrucCommentItemsTxsdGBStrucCommentItems0050 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBStrucCommentItemsTxsdGBStrucCommentItems0050 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBStrucCommentItemsTxsdGBStrucCommentItems0050 instance.
func (me *Xsd_Elem_GBStrucCommentItemsTxsdGBStrucCommentItems0050) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBStrucCommentItemsTxsdGBStrucCommentItems0050; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBStrucCommentItems.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBStrucComment struct {
	Xsd_Elem_GBStrucCommentNameXsdtString0049

	Xsd_Elem_GBStrucCommentItemsTxsdGBStrucCommentItems0050
}

//	If the WalkHandlers.TxsdGBStrucComment function is not nil (ie. was set by outside code), calls it with this TxsdGBStrucComment instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGBStrucComment instance.
func (me *TxsdGBStrucComment) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBStrucComment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elem_GBStrucCommentNameXsdtString0049.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBStrucCommentItemsTxsdGBStrucCommentItems0050.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBStrucComment struct {
	GBStrucComments []*TxsdGBStrucComment `xml:"GBStrucComment"`
}

//	If the WalkHandlers.Xsd_Elems_GBStrucComment function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBStrucComment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBStrucComment instance.
func (me *Xsd_Elems_GBStrucComment) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBStrucComment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBStrucComments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBSeqStrucComments struct {
	Xsd_Elems_GBStrucComment
}

//	If the WalkHandlers.TxsdGBSeqStrucComments function is not nil (ie. was set by outside code), calls it with this TxsdGBSeqStrucComments instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBSeqStrucComments instance.
func (me *TxsdGBSeqStrucComments) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBSeqStrucComments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBStrucComment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqStrucCommentsTxsdGBSeqStrucComments0026 struct {
	GBSeqStrucComments *TxsdGBSeqStrucComments `xml:"GBSeq_struc-comments"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqStrucCommentsTxsdGBSeqStrucComments0026 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqStrucCommentsTxsdGBSeqStrucComments0026 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBSeqStrucCommentsTxsdGBSeqStrucComments0026 instance.
func (me *Xsd_Elem_GBSeqStrucCommentsTxsdGBSeqStrucComments0026) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqStrucCommentsTxsdGBSeqStrucComments0026; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBSeqStrucComments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqLocusXsdtString0001 struct {
	GBSeqLocus xsdt.String `xml:"GBSeq_locus"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqLocusXsdtString0001 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqLocusXsdtString0001 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqLocusXsdtString0001 instance.
func (me *Xsd_Elem_GBSeqLocusXsdtString0001) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqLocusXsdtString0001; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqAccessionVersionXsdtString0014 struct {
	GBSeqAccessionVersion xsdt.String `xml:"GBSeq_accession-version"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqAccessionVersionXsdtString0014 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqAccessionVersionXsdtString0014 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqAccessionVersionXsdtString0014 instance.
func (me *Xsd_Elem_GBSeqAccessionVersionXsdtString0014) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqAccessionVersionXsdtString0014; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqSourceXsdtString0020 struct {
	GBSeqSource xsdt.String `xml:"GBSeq_source"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqSourceXsdtString0020 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqSourceXsdtString0020 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqSourceXsdtString0020 instance.
func (me *Xsd_Elem_GBSeqSourceXsdtString0020) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqSourceXsdtString0020; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqTaxonomyXsdtString0022 struct {
	GBSeqTaxonomy xsdt.String `xml:"GBSeq_taxonomy"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqTaxonomyXsdtString0022 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqTaxonomyXsdtString0022 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqTaxonomyXsdtString0022 instance.
func (me *Xsd_Elem_GBSeqTaxonomyXsdtString0022) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqTaxonomyXsdtString0022; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBCommentParagraph struct {
	GBCommentParagraphs []xsdt.String `xml:"GBCommentParagraph"`
}

//	If the WalkHandlers.Xsd_Elems_GBCommentParagraph function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBCommentParagraph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBCommentParagraph instance.
func (me *Xsd_Elems_GBCommentParagraph) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBCommentParagraph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBCommentParagraphs struct {
	Xsd_Elems_GBCommentParagraph
}

//	If the WalkHandlers.TxsdGBCommentParagraphs function is not nil (ie. was set by outside code), calls it with this TxsdGBCommentParagraphs instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBCommentParagraphs instance.
func (me *TxsdGBCommentParagraphs) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBCommentParagraphs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBCommentParagraph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBCommentParagraphsTxsdGBCommentParagraphs0048 struct {
	GBCommentParagraphs *TxsdGBCommentParagraphs `xml:"GBComment_paragraphs"`
}

//	If the WalkHandlers.Xsd_Elem_GBCommentParagraphsTxsdGBCommentParagraphs0048 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBCommentParagraphsTxsdGBCommentParagraphs0048 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBCommentParagraphsTxsdGBCommentParagraphs0048 instance.
func (me *Xsd_Elem_GBCommentParagraphsTxsdGBCommentParagraphs0048) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBCommentParagraphsTxsdGBCommentParagraphs0048; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBCommentParagraphs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBCommentTypeXsdtString0047 struct {
	GBCommentType xsdt.String `xml:"GBComment_type"`
}

//	If the WalkHandlers.Xsd_Elem_GBCommentTypeXsdtString0047 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBCommentTypeXsdtString0047 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBCommentTypeXsdtString0047 instance.
func (me *Xsd_Elem_GBCommentTypeXsdtString0047) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBCommentTypeXsdtString0047; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBComment struct {
	Xsd_Elem_GBCommentTypeXsdtString0047

	Xsd_Elem_GBCommentParagraphsTxsdGBCommentParagraphs0048
}

//	If the WalkHandlers.TxsdGBComment function is not nil (ie. was set by outside code), calls it with this TxsdGBComment instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGBComment instance.
func (me *TxsdGBComment) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBComment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elem_GBCommentTypeXsdtString0047.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBCommentParagraphsTxsdGBCommentParagraphs0048.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBComment struct {
	GBComments []*TxsdGBComment `xml:"GBComment"`
}

//	If the WalkHandlers.Xsd_Elems_GBComment function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBComment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBComment instance.
func (me *Xsd_Elems_GBComment) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBComment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBComments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBSeqCommentSet struct {
	Xsd_Elems_GBComment
}

//	If the WalkHandlers.TxsdGBSeqCommentSet function is not nil (ie. was set by outside code), calls it with this TxsdGBSeqCommentSet instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBSeqCommentSet instance.
func (me *TxsdGBSeqCommentSet) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBSeqCommentSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBComment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqCommentSetTxsdGBSeqCommentSet0025 struct {
	GBSeqCommentSet *TxsdGBSeqCommentSet `xml:"GBSeq_comment-set"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqCommentSetTxsdGBSeqCommentSet0025 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqCommentSetTxsdGBSeqCommentSet0025 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBSeqCommentSetTxsdGBSeqCommentSet0025 instance.
func (me *Xsd_Elem_GBSeqCommentSetTxsdGBSeqCommentSet0025) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqCommentSetTxsdGBSeqCommentSet0025; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBSeqCommentSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqContigXsdtString0033 struct {
	GBSeqContig xsdt.String `xml:"GBSeq_contig"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqContigXsdtString0033 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqContigXsdtString0033 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqContigXsdtString0033 instance.
func (me *Xsd_Elem_GBSeqContigXsdtString0033) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqContigXsdtString0033; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqSourceDbXsdtString0028 struct {
	GBSeqSourceDb xsdt.String `xml:"GBSeq_source-db"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqSourceDbXsdtString0028 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqSourceDbXsdtString0028 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqSourceDbXsdtString0028 instance.
func (me *Xsd_Elem_GBSeqSourceDbXsdtString0028) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqSourceDbXsdtString0028; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqTopologyXsdtString0005 struct {
	GBSeqTopology xsdt.String `xml:"GBSeq_topology"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqTopologyXsdtString0005 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqTopologyXsdtString0005 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqTopologyXsdtString0005 instance.
func (me *Xsd_Elem_GBSeqTopologyXsdtString0005) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqTopologyXsdtString0005; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqCreateDateXsdtString0008 struct {
	GBSeqCreateDate xsdt.String `xml:"GBSeq_create-date"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqCreateDateXsdtString0008 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqCreateDateXsdtString0008 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqCreateDateXsdtString0008 instance.
func (me *Xsd_Elem_GBSeqCreateDateXsdtString0008) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqCreateDateXsdtString0008; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqCreateReleaseXsdtString0010 struct {
	GBSeqCreateRelease xsdt.String `xml:"GBSeq_create-release"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqCreateReleaseXsdtString0010 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqCreateReleaseXsdtString0010 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqCreateReleaseXsdtString0010 instance.
func (me *Xsd_Elem_GBSeqCreateReleaseXsdtString0010) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqCreateReleaseXsdtString0010; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqPrimaryAccessionXsdtString0012 struct {
	GBSeqPrimaryAccession xsdt.String `xml:"GBSeq_primary-accession"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqPrimaryAccessionXsdtString0012 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqPrimaryAccessionXsdtString0012 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqPrimaryAccessionXsdtString0012 instance.
func (me *Xsd_Elem_GBSeqPrimaryAccessionXsdtString0012) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqPrimaryAccessionXsdtString0012; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSecondaryAccn struct {
	GBSecondaryAccns []xsdt.String `xml:"GBSecondary-accn"`
}

//	If the WalkHandlers.Xsd_Elems_GBSecondaryAccn function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSecondaryAccn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSecondaryAccn instance.
func (me *Xsd_Elems_GBSecondaryAccn) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSecondaryAccn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBSeqSecondaryAccessions struct {
	Xsd_Elems_GBSecondaryAccn
}

//	If the WalkHandlers.TxsdGBSeqSecondaryAccessions function is not nil (ie. was set by outside code), calls it with this TxsdGBSeqSecondaryAccessions instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBSeqSecondaryAccessions instance.
func (me *TxsdGBSeqSecondaryAccessions) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBSeqSecondaryAccessions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBSecondaryAccn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016 struct {
	GBSeqSecondaryAccessions *TxsdGBSeqSecondaryAccessions `xml:"GBSeq_secondary-accessions"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016 instance.
func (me *Xsd_Elem_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBSeqSecondaryAccessions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqProjectXsdtString0017 struct {
	GBSeqProject xsdt.String `xml:"GBSeq_project"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqProjectXsdtString0017 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqProjectXsdtString0017 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqProjectXsdtString0017 instance.
func (me *Xsd_Elem_GBSeqProjectXsdtString0017) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqProjectXsdtString0017; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqCommentXsdtString0024 struct {
	GBSeqComment xsdt.String `xml:"GBSeq_comment"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqCommentXsdtString0024 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqCommentXsdtString0024 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqCommentXsdtString0024 instance.
func (me *Xsd_Elem_GBSeqCommentXsdtString0024) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqCommentXsdtString0024; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqSequenceXsdtString0032 struct {
	GBSeqSequence xsdt.String `xml:"GBSeq_sequence"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqSequenceXsdtString0032 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqSequenceXsdtString0032 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqSequenceXsdtString0032 instance.
func (me *Xsd_Elem_GBSeqSequenceXsdtString0032) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqSequenceXsdtString0032; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqLengthXsdtInteger0002 struct {
	GBSeqLength xsdt.Integer `xml:"GBSeq_length"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqLengthXsdtInteger0002 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqLengthXsdtInteger0002 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqLengthXsdtInteger0002 instance.
func (me *Xsd_Elem_GBSeqLengthXsdtInteger0002) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqLengthXsdtInteger0002; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqid struct {
	GBSeqids []xsdt.String `xml:"GBSeqid"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqid function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqid instance.
func (me *Xsd_Elems_GBSeqid) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBSeqOtherSeqids struct {
	Xsd_Elems_GBSeqid
}

//	If the WalkHandlers.TxsdGBSeqOtherSeqids function is not nil (ie. was set by outside code), calls it with this TxsdGBSeqOtherSeqids instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBSeqOtherSeqids instance.
func (me *TxsdGBSeqOtherSeqids) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBSeqOtherSeqids; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBSeqid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015 struct {
	GBSeqOtherSeqids *TxsdGBSeqOtherSeqids `xml:"GBSeq_other-seqids"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015 instance.
func (me *Xsd_Elem_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBSeqOtherSeqids.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAuthor struct {
	GBAuthors []xsdt.String `xml:"GBAuthor"`
}

//	If the WalkHandlers.Xsd_Elems_GBAuthor function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAuthor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAuthor instance.
func (me *Xsd_Elems_GBAuthor) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAuthor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBReferenceAuthors struct {
	Xsd_Elems_GBAuthor
}

//	If the WalkHandlers.TxsdGBReferenceAuthors function is not nil (ie. was set by outside code), calls it with this TxsdGBReferenceAuthors instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBReferenceAuthors instance.
func (me *TxsdGBReferenceAuthors) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBReferenceAuthors; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBAuthor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBReferenceAuthorsTxsdGBReferenceAuthors0038 struct {
	GBReferenceAuthors *TxsdGBReferenceAuthors `xml:"GBReference_authors"`
}

//	If the WalkHandlers.Xsd_Elem_GBReferenceAuthorsTxsdGBReferenceAuthors0038 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBReferenceAuthorsTxsdGBReferenceAuthors0038 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBReferenceAuthorsTxsdGBReferenceAuthors0038 instance.
func (me *Xsd_Elem_GBReferenceAuthorsTxsdGBReferenceAuthors0038) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBReferenceAuthorsTxsdGBReferenceAuthors0038; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBReferenceAuthors.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBReferenceConsortiumXsdtString0039 struct {
	GBReferenceConsortium xsdt.String `xml:"GBReference_consortium"`
}

//	If the WalkHandlers.Xsd_Elem_GBReferenceConsortiumXsdtString0039 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBReferenceConsortiumXsdtString0039 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBReferenceConsortiumXsdtString0039 instance.
func (me *Xsd_Elem_GBReferenceConsortiumXsdtString0039) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBReferenceConsortiumXsdtString0039; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBReferenceReferenceXsdtString0036 struct {
	GBReferenceReference xsdt.String `xml:"GBReference_reference"`
}

//	If the WalkHandlers.Xsd_Elem_GBReferenceReferenceXsdtString0036 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBReferenceReferenceXsdtString0036 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBReferenceReferenceXsdtString0036 instance.
func (me *Xsd_Elem_GBReferenceReferenceXsdtString0036) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBReferenceReferenceXsdtString0036; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBReferencePositionXsdtString0037 struct {
	GBReferencePosition xsdt.String `xml:"GBReference_position"`
}

//	If the WalkHandlers.Xsd_Elem_GBReferencePositionXsdtString0037 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBReferencePositionXsdtString0037 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBReferencePositionXsdtString0037 instance.
func (me *Xsd_Elem_GBReferencePositionXsdtString0037) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBReferencePositionXsdtString0037; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBReferenceTitleXsdtString0040 struct {
	GBReferenceTitle xsdt.String `xml:"GBReference_title"`
}

//	If the WalkHandlers.Xsd_Elem_GBReferenceTitleXsdtString0040 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBReferenceTitleXsdtString0040 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBReferenceTitleXsdtString0040 instance.
func (me *Xsd_Elem_GBReferenceTitleXsdtString0040) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBReferenceTitleXsdtString0040; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBReferenceJournalXsdtString0041 struct {
	GBReferenceJournal xsdt.String `xml:"GBReference_journal"`
}

//	If the WalkHandlers.Xsd_Elem_GBReferenceJournalXsdtString0041 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBReferenceJournalXsdtString0041 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBReferenceJournalXsdtString0041 instance.
func (me *Xsd_Elem_GBReferenceJournalXsdtString0041) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBReferenceJournalXsdtString0041; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBXrefDbnameXsdtString0045 struct {
	GBXrefDbname xsdt.String `xml:"GBXref_dbname"`
}

//	If the WalkHandlers.Xsd_Elem_GBXrefDbnameXsdtString0045 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBXrefDbnameXsdtString0045 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBXrefDbnameXsdtString0045 instance.
func (me *Xsd_Elem_GBXrefDbnameXsdtString0045) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBXrefDbnameXsdtString0045; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBXrefIdXsdtString0046 struct {
	GBXrefId xsdt.String `xml:"GBXref_id"`
}

//	If the WalkHandlers.Xsd_Elem_GBXrefIdXsdtString0046 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBXrefIdXsdtString0046 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBXrefIdXsdtString0046 instance.
func (me *Xsd_Elem_GBXrefIdXsdtString0046) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBXrefIdXsdtString0046; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBXref struct {
	Xsd_Elem_GBXrefIdXsdtString0046

	Xsd_Elem_GBXrefDbnameXsdtString0045
}

//	If the WalkHandlers.TxsdGBXref function is not nil (ie. was set by outside code), calls it with this TxsdGBXref instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGBXref instance.
func (me *TxsdGBXref) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBXref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elem_GBXrefDbnameXsdtString0045.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBXrefIdXsdtString0046.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBXref struct {
	GBXrefs []*TxsdGBXref `xml:"GBXref"`
}

//	If the WalkHandlers.Xsd_Elems_GBXref function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBXref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBXref instance.
func (me *Xsd_Elems_GBXref) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBXref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBXrefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBReferenceXref struct {
	Xsd_Elems_GBXref
}

//	If the WalkHandlers.TxsdGBReferenceXref function is not nil (ie. was set by outside code), calls it with this TxsdGBReferenceXref instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBReferenceXref instance.
func (me *TxsdGBReferenceXref) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBReferenceXref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBXref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBReferenceXrefTxsdGBReferenceXref0042 struct {
	GBReferenceXref *TxsdGBReferenceXref `xml:"GBReference_xref"`
}

//	If the WalkHandlers.Xsd_Elem_GBReferenceXrefTxsdGBReferenceXref0042 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBReferenceXrefTxsdGBReferenceXref0042 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBReferenceXrefTxsdGBReferenceXref0042 instance.
func (me *Xsd_Elem_GBReferenceXrefTxsdGBReferenceXref0042) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBReferenceXrefTxsdGBReferenceXref0042; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBReferenceXref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBReferencePubmedXsdtInteger0043 struct {
	GBReferencePubmed xsdt.Integer `xml:"GBReference_pubmed"`
}

//	If the WalkHandlers.Xsd_Elem_GBReferencePubmedXsdtInteger0043 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBReferencePubmedXsdtInteger0043 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBReferencePubmedXsdtInteger0043 instance.
func (me *Xsd_Elem_GBReferencePubmedXsdtInteger0043) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBReferencePubmedXsdtInteger0043; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBReferenceRemarkXsdtString0044 struct {
	GBReferenceRemark xsdt.String `xml:"GBReference_remark"`
}

//	If the WalkHandlers.Xsd_Elem_GBReferenceRemarkXsdtString0044 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBReferenceRemarkXsdtString0044 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBReferenceRemarkXsdtString0044 instance.
func (me *Xsd_Elem_GBReferenceRemarkXsdtString0044) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBReferenceRemarkXsdtString0044; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBReference struct {
	Xsd_Elem_GBReferenceJournalXsdtString0041

	Xsd_Elem_GBReferenceXrefTxsdGBReferenceXref0042

	Xsd_Elem_GBReferencePubmedXsdtInteger0043

	Xsd_Elem_GBReferenceRemarkXsdtString0044

	Xsd_Elem_GBReferenceReferenceXsdtString0036

	Xsd_Elem_GBReferencePositionXsdtString0037

	Xsd_Elem_GBReferenceTitleXsdtString0040

	Xsd_Elem_GBReferenceAuthorsTxsdGBReferenceAuthors0038

	Xsd_Elem_GBReferenceConsortiumXsdtString0039
}

//	If the WalkHandlers.TxsdGBReference function is not nil (ie. was set by outside code), calls it with this TxsdGBReference instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TxsdGBReference instance.
func (me *TxsdGBReference) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elem_GBReferenceConsortiumXsdtString0039.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBReferenceAuthorsTxsdGBReferenceAuthors0038.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBReferencePositionXsdtString0037.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBReferenceTitleXsdtString0040.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBReferenceJournalXsdtString0041.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBReferenceXrefTxsdGBReferenceXref0042.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBReferencePubmedXsdtInteger0043.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBReferenceRemarkXsdtString0044.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBReferenceReferenceXsdtString0036.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBReference struct {
	GBReferences []*TxsdGBReference `xml:"GBReference"`
}

//	If the WalkHandlers.Xsd_Elems_GBReference function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBReference instance.
func (me *Xsd_Elems_GBReference) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBSeqReferences struct {
	Xsd_Elems_GBReference
}

//	If the WalkHandlers.TxsdGBSeqReferences function is not nil (ie. was set by outside code), calls it with this TxsdGBSeqReferences instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBSeqReferences instance.
func (me *TxsdGBSeqReferences) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBSeqReferences; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqReferencesTxsdGBSeqReferences0023 struct {
	GBSeqReferences *TxsdGBSeqReferences `xml:"GBSeq_references"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqReferencesTxsdGBSeqReferences0023 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqReferencesTxsdGBSeqReferences0023 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBSeqReferencesTxsdGBSeqReferences0023 instance.
func (me *Xsd_Elem_GBSeqReferencesTxsdGBSeqReferences0023) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqReferencesTxsdGBSeqReferences0023; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBSeqReferences.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqDatabaseReferenceXsdtString0029 struct {
	GBSeqDatabaseReference xsdt.String `xml:"GBSeq_database-reference"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqDatabaseReferenceXsdtString0029 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqDatabaseReferenceXsdtString0029 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqDatabaseReferenceXsdtString0029 instance.
func (me *Xsd_Elem_GBSeqDatabaseReferenceXsdtString0029) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqDatabaseReferenceXsdtString0029; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqMoltypeXsdtString0004 struct {
	GBSeqMoltype xsdt.String `xml:"GBSeq_moltype"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqMoltypeXsdtString0004 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqMoltypeXsdtString0004 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqMoltypeXsdtString0004 instance.
func (me *Xsd_Elem_GBSeqMoltypeXsdtString0004) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqMoltypeXsdtString0004; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqEntryVersionXsdtString0013 struct {
	GBSeqEntryVersion xsdt.String `xml:"GBSeq_entry-version"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqEntryVersionXsdtString0013 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqEntryVersionXsdtString0013 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqEntryVersionXsdtString0013 instance.
func (me *Xsd_Elem_GBSeqEntryVersionXsdtString0013) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqEntryVersionXsdtString0013; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBKeyword struct {
	GBKeywords []xsdt.String `xml:"GBKeyword"`
}

//	If the WalkHandlers.Xsd_Elems_GBKeyword function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBKeyword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBKeyword instance.
func (me *Xsd_Elems_GBKeyword) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBKeyword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBSeqKeywords struct {
	Xsd_Elems_GBKeyword
}

//	If the WalkHandlers.TxsdGBSeqKeywords function is not nil (ie. was set by outside code), calls it with this TxsdGBSeqKeywords instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBSeqKeywords instance.
func (me *TxsdGBSeqKeywords) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBSeqKeywords; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBKeyword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqKeywordsTxsdGBSeqKeywords0018 struct {
	GBSeqKeywords *TxsdGBSeqKeywords `xml:"GBSeq_keywords"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqKeywordsTxsdGBSeqKeywords0018 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqKeywordsTxsdGBSeqKeywords0018 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBSeqKeywordsTxsdGBSeqKeywords0018 instance.
func (me *Xsd_Elem_GBSeqKeywordsTxsdGBSeqKeywords0018) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqKeywordsTxsdGBSeqKeywords0018; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBSeqKeywords.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBFeatureKeyXsdtString0056 struct {
	GBFeatureKey xsdt.String `xml:"GBFeature_key"`
}

//	If the WalkHandlers.Xsd_Elem_GBFeatureKeyXsdtString0056 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBFeatureKeyXsdtString0056 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBFeatureKeyXsdtString0056 instance.
func (me *Xsd_Elem_GBFeatureKeyXsdtString0056) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBFeatureKeyXsdtString0056; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBFeatureLocationXsdtString0057 struct {
	GBFeatureLocation xsdt.String `xml:"GBFeature_location"`
}

//	If the WalkHandlers.Xsd_Elem_GBFeatureLocationXsdtString0057 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBFeatureLocationXsdtString0057 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBFeatureLocationXsdtString0057 instance.
func (me *Xsd_Elem_GBFeatureLocationXsdtString0057) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBFeatureLocationXsdtString0057; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBIntervalFromXsdtInteger0064 struct {
	GBIntervalFrom xsdt.Integer `xml:"GBInterval_from"`
}

//	If the WalkHandlers.Xsd_Elem_GBIntervalFromXsdtInteger0064 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBIntervalFromXsdtInteger0064 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBIntervalFromXsdtInteger0064 instance.
func (me *Xsd_Elem_GBIntervalFromXsdtInteger0064) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBIntervalFromXsdtInteger0064; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBIntervalToXsdtInteger0065 struct {
	GBIntervalTo xsdt.Integer `xml:"GBInterval_to"`
}

//	If the WalkHandlers.Xsd_Elem_GBIntervalToXsdtInteger0065 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBIntervalToXsdtInteger0065 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBIntervalToXsdtInteger0065 instance.
func (me *Xsd_Elem_GBIntervalToXsdtInteger0065) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBIntervalToXsdtInteger0065; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBIntervalPointXsdtInteger0066 struct {
	GBIntervalPoint xsdt.Integer `xml:"GBInterval_point"`
}

//	If the WalkHandlers.Xsd_Elem_GBIntervalPointXsdtInteger0066 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBIntervalPointXsdtInteger0066 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBIntervalPointXsdtInteger0066 instance.
func (me *Xsd_Elem_GBIntervalPointXsdtInteger0066) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBIntervalPointXsdtInteger0066; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBIntervalIscomp xsdt.String

//	Returns true if the value of this enumerated TxsdGBIntervalIscomp is "true".
func (me TxsdGBIntervalIscomp) IsTrue() bool { return me.String() == "true" }

//	Returns true if the value of this enumerated TxsdGBIntervalIscomp is "false".
func (me TxsdGBIntervalIscomp) IsFalse() bool { return me.String() == "false" }

//	Since TxsdGBIntervalIscomp is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdGBIntervalIscomp) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdGBIntervalIscomp is just a simple String type, this merely returns the current string value.
func (me TxsdGBIntervalIscomp) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdGBIntervalIscomp's alias type xsdt.String.
func (me TxsdGBIntervalIscomp) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdHasAttr_Value_TxsdGBIntervalIscomp_ struct {
	Value TxsdGBIntervalIscomp `xml:"http://www.ncbi.nlm.nih.gov value,attr"`
}

type TxsdGBIntervalIscomp1 struct {
	XsdHasAttr_Value_TxsdGBIntervalIscomp_
}

//	If the WalkHandlers.TxsdGBIntervalIscomp1 function is not nil (ie. was set by outside code), calls it with this TxsdGBIntervalIscomp1 instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdGBIntervalIscomp1 instance.
func (me *TxsdGBIntervalIscomp1) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBIntervalIscomp1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBIntervalIscompTxsdGBIntervalIscomp10067 struct {
	GBIntervalIscomp *TxsdGBIntervalIscomp1 `xml:"GBInterval_iscomp"`
}

//	If the WalkHandlers.Xsd_Elem_GBIntervalIscompTxsdGBIntervalIscomp10067 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBIntervalIscompTxsdGBIntervalIscomp10067 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBIntervalIscompTxsdGBIntervalIscomp10067 instance.
func (me *Xsd_Elem_GBIntervalIscompTxsdGBIntervalIscomp10067) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBIntervalIscompTxsdGBIntervalIscomp10067; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBIntervalIscomp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdHasAttr_Value_TxsdGBIntervalInterbp_ struct {
	Value TxsdGBIntervalIscomp `xml:"http://www.ncbi.nlm.nih.gov value,attr"`
}

type TxsdGBIntervalInterbp1 struct {
	XsdHasAttr_Value_TxsdGBIntervalInterbp_
}

//	If the WalkHandlers.TxsdGBIntervalInterbp1 function is not nil (ie. was set by outside code), calls it with this TxsdGBIntervalInterbp1 instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdGBIntervalInterbp1 instance.
func (me *TxsdGBIntervalInterbp1) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBIntervalInterbp1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBIntervalInterbpTxsdGBIntervalInterbp10068 struct {
	GBIntervalInterbp *TxsdGBIntervalInterbp1 `xml:"GBInterval_interbp"`
}

//	If the WalkHandlers.Xsd_Elem_GBIntervalInterbpTxsdGBIntervalInterbp10068 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBIntervalInterbpTxsdGBIntervalInterbp10068 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBIntervalInterbpTxsdGBIntervalInterbp10068 instance.
func (me *Xsd_Elem_GBIntervalInterbpTxsdGBIntervalInterbp10068) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBIntervalInterbpTxsdGBIntervalInterbp10068; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBIntervalInterbp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBIntervalAccessionXsdtString0069 struct {
	GBIntervalAccession xsdt.String `xml:"GBInterval_accession"`
}

//	If the WalkHandlers.Xsd_Elem_GBIntervalAccessionXsdtString0069 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBIntervalAccessionXsdtString0069 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBIntervalAccessionXsdtString0069 instance.
func (me *Xsd_Elem_GBIntervalAccessionXsdtString0069) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBIntervalAccessionXsdtString0069; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBInterval struct {
	Xsd_Elem_GBIntervalAccessionXsdtString0069

	Xsd_Elem_GBIntervalFromXsdtInteger0064

	Xsd_Elem_GBIntervalToXsdtInteger0065

	Xsd_Elem_GBIntervalPointXsdtInteger0066

	Xsd_Elem_GBIntervalIscompTxsdGBIntervalIscomp10067

	Xsd_Elem_GBIntervalInterbpTxsdGBIntervalInterbp10068
}

//	If the WalkHandlers.TxsdGBInterval function is not nil (ie. was set by outside code), calls it with this TxsdGBInterval instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGBInterval instance.
func (me *TxsdGBInterval) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBInterval; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elem_GBIntervalIscompTxsdGBIntervalIscomp10067.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBIntervalInterbpTxsdGBIntervalInterbp10068.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBIntervalAccessionXsdtString0069.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBIntervalFromXsdtInteger0064.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBIntervalToXsdtInteger0065.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBIntervalPointXsdtInteger0066.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBInterval struct {
	GBIntervals []*TxsdGBInterval `xml:"GBInterval"`
}

//	If the WalkHandlers.Xsd_Elems_GBInterval function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBInterval instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBInterval instance.
func (me *Xsd_Elems_GBInterval) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBInterval; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBIntervals {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBFeatureIntervals struct {
	Xsd_Elems_GBInterval
}

//	If the WalkHandlers.TxsdGBFeatureIntervals function is not nil (ie. was set by outside code), calls it with this TxsdGBFeatureIntervals instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBFeatureIntervals instance.
func (me *TxsdGBFeatureIntervals) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBFeatureIntervals; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBInterval.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBFeatureIntervalsTxsdGBFeatureIntervals0058 struct {
	GBFeatureIntervals *TxsdGBFeatureIntervals `xml:"GBFeature_intervals"`
}

//	If the WalkHandlers.Xsd_Elem_GBFeatureIntervalsTxsdGBFeatureIntervals0058 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBFeatureIntervalsTxsdGBFeatureIntervals0058 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBFeatureIntervalsTxsdGBFeatureIntervals0058 instance.
func (me *Xsd_Elem_GBFeatureIntervalsTxsdGBFeatureIntervals0058) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBFeatureIntervalsTxsdGBFeatureIntervals0058; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBFeatureIntervals.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBFeatureOperatorXsdtString0059 struct {
	GBFeatureOperator xsdt.String `xml:"GBFeature_operator"`
}

//	If the WalkHandlers.Xsd_Elem_GBFeatureOperatorXsdtString0059 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBFeatureOperatorXsdtString0059 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBFeatureOperatorXsdtString0059 instance.
func (me *Xsd_Elem_GBFeatureOperatorXsdtString0059) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBFeatureOperatorXsdtString0059; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdHasAttr_Value_TxsdGBFeaturePartial5_ struct {
	Value TxsdGBIntervalIscomp `xml:"http://www.ncbi.nlm.nih.gov value,attr"`
}

type TxsdGBFeaturePartial51 struct {
	XsdHasAttr_Value_TxsdGBFeaturePartial5_
}

//	If the WalkHandlers.TxsdGBFeaturePartial51 function is not nil (ie. was set by outside code), calls it with this TxsdGBFeaturePartial51 instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdGBFeaturePartial51 instance.
func (me *TxsdGBFeaturePartial51) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBFeaturePartial51; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBFeaturePartial5TxsdGBFeaturePartial510060 struct {
	GBFeaturePartial5 *TxsdGBFeaturePartial51 `xml:"GBFeature_partial5"`
}

//	If the WalkHandlers.Xsd_Elem_GBFeaturePartial5TxsdGBFeaturePartial510060 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBFeaturePartial5TxsdGBFeaturePartial510060 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBFeaturePartial5TxsdGBFeaturePartial510060 instance.
func (me *Xsd_Elem_GBFeaturePartial5TxsdGBFeaturePartial510060) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBFeaturePartial5TxsdGBFeaturePartial510060; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBFeaturePartial5.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdHasAttr_Value_TxsdGBFeaturePartial3_ struct {
	Value TxsdGBIntervalIscomp `xml:"http://www.ncbi.nlm.nih.gov value,attr"`
}

type TxsdGBFeaturePartial31 struct {
	XsdHasAttr_Value_TxsdGBFeaturePartial3_
}

//	If the WalkHandlers.TxsdGBFeaturePartial31 function is not nil (ie. was set by outside code), calls it with this TxsdGBFeaturePartial31 instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdGBFeaturePartial31 instance.
func (me *TxsdGBFeaturePartial31) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBFeaturePartial31; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBFeaturePartial3TxsdGBFeaturePartial310061 struct {
	GBFeaturePartial3 *TxsdGBFeaturePartial31 `xml:"GBFeature_partial3"`
}

//	If the WalkHandlers.Xsd_Elem_GBFeaturePartial3TxsdGBFeaturePartial310061 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBFeaturePartial3TxsdGBFeaturePartial310061 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBFeaturePartial3TxsdGBFeaturePartial310061 instance.
func (me *Xsd_Elem_GBFeaturePartial3TxsdGBFeaturePartial310061) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBFeaturePartial3TxsdGBFeaturePartial310061; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBFeaturePartial3.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBQualifierNameXsdtString0070 struct {
	GBQualifierName xsdt.String `xml:"GBQualifier_name"`
}

//	If the WalkHandlers.Xsd_Elem_GBQualifierNameXsdtString0070 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBQualifierNameXsdtString0070 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBQualifierNameXsdtString0070 instance.
func (me *Xsd_Elem_GBQualifierNameXsdtString0070) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBQualifierNameXsdtString0070; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBQualifierValueXsdtString0071 struct {
	GBQualifierValue xsdt.String `xml:"GBQualifier_value"`
}

//	If the WalkHandlers.Xsd_Elem_GBQualifierValueXsdtString0071 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBQualifierValueXsdtString0071 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBQualifierValueXsdtString0071 instance.
func (me *Xsd_Elem_GBQualifierValueXsdtString0071) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBQualifierValueXsdtString0071; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBQualifier struct {
	Xsd_Elem_GBQualifierNameXsdtString0070

	Xsd_Elem_GBQualifierValueXsdtString0071
}

//	If the WalkHandlers.TxsdGBQualifier function is not nil (ie. was set by outside code), calls it with this TxsdGBQualifier instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGBQualifier instance.
func (me *TxsdGBQualifier) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBQualifier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elem_GBQualifierNameXsdtString0070.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBQualifierValueXsdtString0071.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBQualifier struct {
	GBQualifiers []*TxsdGBQualifier `xml:"GBQualifier"`
}

//	If the WalkHandlers.Xsd_Elems_GBQualifier function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBQualifier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBQualifier instance.
func (me *Xsd_Elems_GBQualifier) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBQualifier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBQualifiers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBFeatureQuals struct {
	Xsd_Elems_GBQualifier
}

//	If the WalkHandlers.TxsdGBFeatureQuals function is not nil (ie. was set by outside code), calls it with this TxsdGBFeatureQuals instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBFeatureQuals instance.
func (me *TxsdGBFeatureQuals) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBFeatureQuals; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBQualifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBFeatureQualsTxsdGBFeatureQuals0062 struct {
	GBFeatureQuals *TxsdGBFeatureQuals `xml:"GBFeature_quals"`
}

//	If the WalkHandlers.Xsd_Elem_GBFeatureQualsTxsdGBFeatureQuals0062 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBFeatureQualsTxsdGBFeatureQuals0062 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBFeatureQualsTxsdGBFeatureQuals0062 instance.
func (me *Xsd_Elem_GBFeatureQualsTxsdGBFeatureQuals0062) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBFeatureQualsTxsdGBFeatureQuals0062; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBFeatureQuals.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBFeatureXrefsTxsdGBFeatureXrefs0063 struct {
	GBFeatureXrefs *TxsdGBReferenceXref `xml:"GBFeature_xrefs"`
}

//	If the WalkHandlers.Xsd_Elem_GBFeatureXrefsTxsdGBFeatureXrefs0063 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBFeatureXrefsTxsdGBFeatureXrefs0063 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBFeatureXrefsTxsdGBFeatureXrefs0063 instance.
func (me *Xsd_Elem_GBFeatureXrefsTxsdGBFeatureXrefs0063) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBFeatureXrefsTxsdGBFeatureXrefs0063; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBFeatureXrefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBFeature struct {
	Xsd_Elem_GBFeatureQualsTxsdGBFeatureQuals0062

	Xsd_Elem_GBFeatureXrefsTxsdGBFeatureXrefs0063

	Xsd_Elem_GBFeatureKeyXsdtString0056

	Xsd_Elem_GBFeatureLocationXsdtString0057

	Xsd_Elem_GBFeatureIntervalsTxsdGBFeatureIntervals0058

	Xsd_Elem_GBFeatureOperatorXsdtString0059

	Xsd_Elem_GBFeaturePartial5TxsdGBFeaturePartial510060

	Xsd_Elem_GBFeaturePartial3TxsdGBFeaturePartial310061
}

//	If the WalkHandlers.TxsdGBFeature function is not nil (ie. was set by outside code), calls it with this TxsdGBFeature instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TxsdGBFeature instance.
func (me *TxsdGBFeature) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBFeature; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elem_GBFeatureIntervalsTxsdGBFeatureIntervals0058.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBFeatureOperatorXsdtString0059.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBFeaturePartial5TxsdGBFeaturePartial510060.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBFeaturePartial3TxsdGBFeaturePartial310061.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBFeatureQualsTxsdGBFeatureQuals0062.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBFeatureXrefsTxsdGBFeatureXrefs0063.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBFeatureKeyXsdtString0056.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBFeatureLocationXsdtString0057.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBFeature struct {
	GBFeatures []*TxsdGBFeature `xml:"GBFeature"`
}

//	If the WalkHandlers.Xsd_Elems_GBFeature function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBFeature instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBFeature instance.
func (me *Xsd_Elems_GBFeature) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBFeature; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBFeatures {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBSeqFeatureTable struct {
	Xsd_Elems_GBFeature
}

//	If the WalkHandlers.TxsdGBSeqFeatureTable function is not nil (ie. was set by outside code), calls it with this TxsdGBSeqFeatureTable instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBSeqFeatureTable instance.
func (me *TxsdGBSeqFeatureTable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBSeqFeatureTable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBFeature.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqFeatureTableTxsdGBSeqFeatureTable0030 struct {
	GBSeqFeatureTable *TxsdGBSeqFeatureTable `xml:"GBSeq_feature-table"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqFeatureTableTxsdGBSeqFeatureTable0030 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqFeatureTableTxsdGBSeqFeatureTable0030 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBSeqFeatureTableTxsdGBSeqFeatureTable0030 instance.
func (me *Xsd_Elem_GBSeqFeatureTableTxsdGBSeqFeatureTable0030) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqFeatureTableTxsdGBSeqFeatureTable0030; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBSeqFeatureTable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqXrefsTxsdGBSeqXrefs0035 struct {
	GBSeqXrefs *TxsdGBReferenceXref `xml:"GBSeq_xrefs"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqXrefsTxsdGBSeqXrefs0035 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqXrefsTxsdGBSeqXrefs0035 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBSeqXrefsTxsdGBSeqXrefs0035 instance.
func (me *Xsd_Elem_GBSeqXrefsTxsdGBSeqXrefs0035) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqXrefsTxsdGBSeqXrefs0035; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBSeqXrefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqStrandednessXsdtString0003 struct {
	GBSeqStrandedness xsdt.String `xml:"GBSeq_strandedness"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqStrandednessXsdtString0003 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqStrandednessXsdtString0003 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqStrandednessXsdtString0003 instance.
func (me *Xsd_Elem_GBSeqStrandednessXsdtString0003) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqStrandednessXsdtString0003; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqUpdateReleaseXsdtString0009 struct {
	GBSeqUpdateRelease xsdt.String `xml:"GBSeq_update-release"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqUpdateReleaseXsdtString0009 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqUpdateReleaseXsdtString0009 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqUpdateReleaseXsdtString0009 instance.
func (me *Xsd_Elem_GBSeqUpdateReleaseXsdtString0009) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqUpdateReleaseXsdtString0009; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqDefinitionXsdtString0011 struct {
	GBSeqDefinition xsdt.String `xml:"GBSeq_definition"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqDefinitionXsdtString0011 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqDefinitionXsdtString0011 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqDefinitionXsdtString0011 instance.
func (me *Xsd_Elem_GBSeqDefinitionXsdtString0011) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqDefinitionXsdtString0011; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqSegmentXsdtString0019 struct {
	GBSeqSegment xsdt.String `xml:"GBSeq_segment"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqSegmentXsdtString0019 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqSegmentXsdtString0019 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqSegmentXsdtString0019 instance.
func (me *Xsd_Elem_GBSeqSegmentXsdtString0019) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqSegmentXsdtString0019; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqOrganismXsdtString0021 struct {
	GBSeqOrganism xsdt.String `xml:"GBSeq_organism"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqOrganismXsdtString0021 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqOrganismXsdtString0021 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqOrganismXsdtString0021 instance.
func (me *Xsd_Elem_GBSeqOrganismXsdtString0021) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqOrganismXsdtString0021; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqPrimaryXsdtString0027 struct {
	GBSeqPrimary xsdt.String `xml:"GBSeq_primary"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqPrimaryXsdtString0027 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqPrimaryXsdtString0027 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqPrimaryXsdtString0027 instance.
func (me *Xsd_Elem_GBSeqPrimaryXsdtString0027) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqPrimaryXsdtString0027; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqUpdateDateXsdtString0007 struct {
	GBSeqUpdateDate xsdt.String `xml:"GBSeq_update-date"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqUpdateDateXsdtString0007 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqUpdateDateXsdtString0007 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqUpdateDateXsdtString0007 instance.
func (me *Xsd_Elem_GBSeqUpdateDateXsdtString0007) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqUpdateDateXsdtString0007; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBFeatureSetAnnotSourceXsdtString0054 struct {
	GBFeatureSetAnnotSource xsdt.String `xml:"GBFeatureSet_annot-source"`
}

//	If the WalkHandlers.Xsd_Elem_GBFeatureSetAnnotSourceXsdtString0054 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBFeatureSetAnnotSourceXsdtString0054 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBFeatureSetAnnotSourceXsdtString0054 instance.
func (me *Xsd_Elem_GBFeatureSetAnnotSourceXsdtString0054) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBFeatureSetAnnotSourceXsdtString0054; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055 struct {
	GBFeatureSetFeatures *TxsdGBSeqFeatureTable `xml:"GBFeatureSet_features"`
}

//	If the WalkHandlers.Xsd_Elem_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055 instance.
func (me *Xsd_Elem_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBFeatureSetFeatures.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBFeatureSet struct {
	Xsd_Elem_GBFeatureSetAnnotSourceXsdtString0054

	Xsd_Elem_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055
}

//	If the WalkHandlers.TxsdGBFeatureSet function is not nil (ie. was set by outside code), calls it with this TxsdGBFeatureSet instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGBFeatureSet instance.
func (me *TxsdGBFeatureSet) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBFeatureSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elem_GBFeatureSetAnnotSourceXsdtString0054.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBFeatureSet struct {
	GBFeatureSets []*TxsdGBFeatureSet `xml:"GBFeatureSet"`
}

//	If the WalkHandlers.Xsd_Elems_GBFeatureSet function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBFeatureSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBFeatureSet instance.
func (me *Xsd_Elems_GBFeatureSet) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBFeatureSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBFeatureSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBSeqFeatureSet struct {
	Xsd_Elems_GBFeatureSet
}

//	If the WalkHandlers.TxsdGBSeqFeatureSet function is not nil (ie. was set by outside code), calls it with this TxsdGBSeqFeatureSet instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBSeqFeatureSet instance.
func (me *TxsdGBSeqFeatureSet) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBSeqFeatureSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBFeatureSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqFeatureSetTxsdGBSeqFeatureSet0031 struct {
	GBSeqFeatureSet *TxsdGBSeqFeatureSet `xml:"GBSeq_feature-set"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqFeatureSetTxsdGBSeqFeatureSet0031 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqFeatureSetTxsdGBSeqFeatureSet0031 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBSeqFeatureSetTxsdGBSeqFeatureSet0031 instance.
func (me *Xsd_Elem_GBSeqFeatureSetTxsdGBSeqFeatureSet0031) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqFeatureSetTxsdGBSeqFeatureSet0031; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBSeqFeatureSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBInterval struct {
	GBInterval *TxsdGBInterval `xml:"GBInterval"`
}

//	If the WalkHandlers.Xsd_Elem_GBInterval function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBInterval instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBInterval instance.
func (me *Xsd_Elem_GBInterval) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBInterval; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBInterval.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBAltSeqItemInterval struct {
	Xsd_Elem_GBInterval
}

//	If the WalkHandlers.TxsdGBAltSeqItemInterval function is not nil (ie. was set by outside code), calls it with this TxsdGBAltSeqItemInterval instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBAltSeqItemInterval instance.
func (me *TxsdGBAltSeqItemInterval) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBAltSeqItemInterval; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elem_GBInterval.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074 struct {
	GBAltSeqItemInterval *TxsdGBAltSeqItemInterval `xml:"GBAltSeqItem_interval"`
}

//	If the WalkHandlers.Xsd_Elem_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074 instance.
func (me *Xsd_Elem_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBAltSeqItemInterval.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdHasAttr_Value_TxsdGBAltSeqItemIsgap_ struct {
	Value TxsdGBIntervalIscomp `xml:"http://www.ncbi.nlm.nih.gov value,attr"`
}

type TxsdGBAltSeqItemIsgap1 struct {
	XsdHasAttr_Value_TxsdGBAltSeqItemIsgap_
}

//	If the WalkHandlers.TxsdGBAltSeqItemIsgap1 function is not nil (ie. was set by outside code), calls it with this TxsdGBAltSeqItemIsgap1 instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdGBAltSeqItemIsgap1 instance.
func (me *TxsdGBAltSeqItemIsgap1) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBAltSeqItemIsgap1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075 struct {
	GBAltSeqItemIsgap *TxsdGBAltSeqItemIsgap1 `xml:"GBAltSeqItem_isgap"`
}

//	If the WalkHandlers.Xsd_Elem_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075 instance.
func (me *Xsd_Elem_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBAltSeqItemIsgap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAltSeqItemGapLengthXsdtInteger0076 struct {
	GBAltSeqItemGapLength xsdt.Integer `xml:"GBAltSeqItem_gap-length"`
}

//	If the WalkHandlers.Xsd_Elem_GBAltSeqItemGapLengthXsdtInteger0076 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAltSeqItemGapLengthXsdtInteger0076 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBAltSeqItemGapLengthXsdtInteger0076 instance.
func (me *Xsd_Elem_GBAltSeqItemGapLengthXsdtInteger0076) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAltSeqItemGapLengthXsdtInteger0076; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAltSeqItemGapCommentXsdtString0079 struct {
	GBAltSeqItemGapComment xsdt.String `xml:"GBAltSeqItem_gap-comment"`
}

//	If the WalkHandlers.Xsd_Elem_GBAltSeqItemGapCommentXsdtString0079 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAltSeqItemGapCommentXsdtString0079 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBAltSeqItemGapCommentXsdtString0079 instance.
func (me *Xsd_Elem_GBAltSeqItemGapCommentXsdtString0079) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAltSeqItemGapCommentXsdtString0079; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAltSeqItemValueXsdtString0082 struct {
	GBAltSeqItemValue xsdt.String `xml:"GBAltSeqItem_value"`
}

//	If the WalkHandlers.Xsd_Elem_GBAltSeqItemValueXsdtString0082 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAltSeqItemValueXsdtString0082 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBAltSeqItemValueXsdtString0082 instance.
func (me *Xsd_Elem_GBAltSeqItemValueXsdtString0082) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAltSeqItemValueXsdtString0082; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAltSeqItemGapTypeXsdtString0077 struct {
	GBAltSeqItemGapType xsdt.String `xml:"GBAltSeqItem_gap-type"`
}

//	If the WalkHandlers.Xsd_Elem_GBAltSeqItemGapTypeXsdtString0077 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAltSeqItemGapTypeXsdtString0077 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBAltSeqItemGapTypeXsdtString0077 instance.
func (me *Xsd_Elem_GBAltSeqItemGapTypeXsdtString0077) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAltSeqItemGapTypeXsdtString0077; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAltSeqItemGapLinkageXsdtString0078 struct {
	GBAltSeqItemGapLinkage xsdt.String `xml:"GBAltSeqItem_gap-linkage"`
}

//	If the WalkHandlers.Xsd_Elem_GBAltSeqItemGapLinkageXsdtString0078 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAltSeqItemGapLinkageXsdtString0078 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBAltSeqItemGapLinkageXsdtString0078 instance.
func (me *Xsd_Elem_GBAltSeqItemGapLinkageXsdtString0078) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAltSeqItemGapLinkageXsdtString0078; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAltSeqItemFirstAccnXsdtString0080 struct {
	GBAltSeqItemFirstAccn xsdt.String `xml:"GBAltSeqItem_first-accn"`
}

//	If the WalkHandlers.Xsd_Elem_GBAltSeqItemFirstAccnXsdtString0080 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAltSeqItemFirstAccnXsdtString0080 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBAltSeqItemFirstAccnXsdtString0080 instance.
func (me *Xsd_Elem_GBAltSeqItemFirstAccnXsdtString0080) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAltSeqItemFirstAccnXsdtString0080; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAltSeqItemLastAccnXsdtString0081 struct {
	GBAltSeqItemLastAccn xsdt.String `xml:"GBAltSeqItem_last-accn"`
}

//	If the WalkHandlers.Xsd_Elem_GBAltSeqItemLastAccnXsdtString0081 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAltSeqItemLastAccnXsdtString0081 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBAltSeqItemLastAccnXsdtString0081 instance.
func (me *Xsd_Elem_GBAltSeqItemLastAccnXsdtString0081) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAltSeqItemLastAccnXsdtString0081; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBAltSeqItem struct {
	Xsd_Elem_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074

	Xsd_Elem_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075

	Xsd_Elem_GBAltSeqItemGapLengthXsdtInteger0076

	Xsd_Elem_GBAltSeqItemGapCommentXsdtString0079

	Xsd_Elem_GBAltSeqItemValueXsdtString0082

	Xsd_Elem_GBAltSeqItemGapTypeXsdtString0077

	Xsd_Elem_GBAltSeqItemGapLinkageXsdtString0078

	Xsd_Elem_GBAltSeqItemFirstAccnXsdtString0080

	Xsd_Elem_GBAltSeqItemLastAccnXsdtString0081
}

//	If the WalkHandlers.TxsdGBAltSeqItem function is not nil (ie. was set by outside code), calls it with this TxsdGBAltSeqItem instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TxsdGBAltSeqItem instance.
func (me *TxsdGBAltSeqItem) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBAltSeqItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elem_GBAltSeqItemGapLengthXsdtInteger0076.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBAltSeqItemGapCommentXsdtString0079.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBAltSeqItemValueXsdtString0082.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBAltSeqItemFirstAccnXsdtString0080.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBAltSeqItemLastAccnXsdtString0081.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBAltSeqItemGapTypeXsdtString0077.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBAltSeqItemGapLinkageXsdtString0078.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAltSeqItem struct {
	GBAltSeqItems []*TxsdGBAltSeqItem `xml:"GBAltSeqItem"`
}

//	If the WalkHandlers.Xsd_Elems_GBAltSeqItem function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAltSeqItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAltSeqItem instance.
func (me *Xsd_Elems_GBAltSeqItem) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAltSeqItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBAltSeqItems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBAltSeqDataItems struct {
	Xsd_Elems_GBAltSeqItem
}

//	If the WalkHandlers.TxsdGBAltSeqDataItems function is not nil (ie. was set by outside code), calls it with this TxsdGBAltSeqDataItems instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBAltSeqDataItems instance.
func (me *TxsdGBAltSeqDataItems) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBAltSeqDataItems; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBAltSeqItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073 struct {
	GBAltSeqDataItems *TxsdGBAltSeqDataItems `xml:"GBAltSeqData_items"`
}

//	If the WalkHandlers.Xsd_Elem_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073 instance.
func (me *Xsd_Elem_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBAltSeqDataItems.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAltSeqDataNameXsdtString0072 struct {
	GBAltSeqDataName xsdt.String `xml:"GBAltSeqData_name"`
}

//	If the WalkHandlers.Xsd_Elem_GBAltSeqDataNameXsdtString0072 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAltSeqDataNameXsdtString0072 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBAltSeqDataNameXsdtString0072 instance.
func (me *Xsd_Elem_GBAltSeqDataNameXsdtString0072) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAltSeqDataNameXsdtString0072; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBAltSeqData struct {
	Xsd_Elem_GBAltSeqDataNameXsdtString0072

	Xsd_Elem_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073
}

//	If the WalkHandlers.TxsdGBAltSeqData function is not nil (ie. was set by outside code), calls it with this TxsdGBAltSeqData instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGBAltSeqData instance.
func (me *TxsdGBAltSeqData) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBAltSeqData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elem_GBAltSeqDataNameXsdtString0072.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAltSeqData struct {
	GBAltSeqDatas []*TxsdGBAltSeqData `xml:"GBAltSeqData"`
}

//	If the WalkHandlers.Xsd_Elems_GBAltSeqData function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAltSeqData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAltSeqData instance.
func (me *Xsd_Elems_GBAltSeqData) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAltSeqData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBAltSeqDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBSeqAltSeq struct {
	Xsd_Elems_GBAltSeqData
}

//	If the WalkHandlers.TxsdGBSeqAltSeq function is not nil (ie. was set by outside code), calls it with this TxsdGBSeqAltSeq instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBSeqAltSeq instance.
func (me *TxsdGBSeqAltSeq) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBSeqAltSeq; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBAltSeqData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqAltSeqTxsdGBSeqAltSeq0034 struct {
	GBSeqAltSeq *TxsdGBSeqAltSeq `xml:"GBSeq_alt-seq"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqAltSeqTxsdGBSeqAltSeq0034 function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqAltSeqTxsdGBSeqAltSeq0034 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBSeqAltSeqTxsdGBSeqAltSeq0034 instance.
func (me *Xsd_Elem_GBSeqAltSeqTxsdGBSeqAltSeq0034) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqAltSeqTxsdGBSeqAltSeq0034; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBSeqAltSeq.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBSeq struct {
	Xsd_Elem_GBSeqOrganismXsdtString0021

	Xsd_Elem_GBSeqPrimaryXsdtString0027

	Xsd_Elem_GBSeqStrandednessXsdtString0003

	Xsd_Elem_GBSeqUpdateReleaseXsdtString0009

	Xsd_Elem_GBSeqDefinitionXsdtString0011

	Xsd_Elem_GBSeqSegmentXsdtString0019

	Xsd_Elem_GBSeqUpdateDateXsdtString0007

	Xsd_Elem_GBSeqFeatureSetTxsdGBSeqFeatureSet0031

	Xsd_Elem_GBSeqAltSeqTxsdGBSeqAltSeq0034

	Xsd_Elem_GBSeqDivisionXsdtString0006

	Xsd_Elem_GBSeqStrucCommentsTxsdGBSeqStrucComments0026

	Xsd_Elem_GBSeqCommentSetTxsdGBSeqCommentSet0025

	Xsd_Elem_GBSeqContigXsdtString0033

	Xsd_Elem_GBSeqLocusXsdtString0001

	Xsd_Elem_GBSeqAccessionVersionXsdtString0014

	Xsd_Elem_GBSeqSourceXsdtString0020

	Xsd_Elem_GBSeqTaxonomyXsdtString0022

	Xsd_Elem_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016

	Xsd_Elem_GBSeqProjectXsdtString0017

	Xsd_Elem_GBSeqCommentXsdtString0024

	Xsd_Elem_GBSeqSourceDbXsdtString0028

	Xsd_Elem_GBSeqTopologyXsdtString0005

	Xsd_Elem_GBSeqCreateDateXsdtString0008

	Xsd_Elem_GBSeqCreateReleaseXsdtString0010

	Xsd_Elem_GBSeqPrimaryAccessionXsdtString0012

	Xsd_Elem_GBSeqSequenceXsdtString0032

	Xsd_Elem_GBSeqLengthXsdtInteger0002

	Xsd_Elem_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015

	Xsd_Elem_GBSeqReferencesTxsdGBSeqReferences0023

	Xsd_Elem_GBSeqDatabaseReferenceXsdtString0029

	Xsd_Elem_GBSeqXrefsTxsdGBSeqXrefs0035

	Xsd_Elem_GBSeqMoltypeXsdtString0004

	Xsd_Elem_GBSeqEntryVersionXsdtString0013

	Xsd_Elem_GBSeqKeywordsTxsdGBSeqKeywords0018

	Xsd_Elem_GBSeqFeatureTableTxsdGBSeqFeatureTable0030
}

//	If the WalkHandlers.TxsdGBSeq function is not nil (ie. was set by outside code), calls it with this TxsdGBSeq instance as the single argument. Then calls the Walk() method on 35/35 embed(s) and 0/0 field(s) belonging to this TxsdGBSeq instance.
func (me *TxsdGBSeq) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBSeq; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elem_GBSeqPrimaryAccessionXsdtString0012.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqProjectXsdtString0017.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqCommentXsdtString0024.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqSourceDbXsdtString0028.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqTopologyXsdtString0005.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqCreateDateXsdtString0008.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqCreateReleaseXsdtString0010.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqSequenceXsdtString0032.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqDatabaseReferenceXsdtString0029.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqLengthXsdtInteger0002.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqReferencesTxsdGBSeqReferences0023.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqFeatureTableTxsdGBSeqFeatureTable0030.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqXrefsTxsdGBSeqXrefs0035.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqMoltypeXsdtString0004.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqEntryVersionXsdtString0013.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqKeywordsTxsdGBSeqKeywords0018.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqSegmentXsdtString0019.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqOrganismXsdtString0021.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqPrimaryXsdtString0027.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqStrandednessXsdtString0003.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqUpdateReleaseXsdtString0009.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqDefinitionXsdtString0011.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqUpdateDateXsdtString0007.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqFeatureSetTxsdGBSeqFeatureSet0031.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqAltSeqTxsdGBSeqAltSeq0034.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqDivisionXsdtString0006.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqStrucCommentsTxsdGBSeqStrucComments0026.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqTaxonomyXsdtString0022.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqCommentSetTxsdGBSeqCommentSet0025.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqContigXsdtString0033.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqLocusXsdtString0001.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqAccessionVersionXsdtString0014.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Xsd_Elem_GBSeqSourceXsdtString0020.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeq struct {
	GBSeqs []*TxsdGBSeq `xml:"GBSeq"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeq function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeq instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeq instance.
func (me *Xsd_Elems_GBSeq) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeq; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBSeqs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGBSet struct {
	Xsd_Elems_GBSeq
}

//	If the WalkHandlers.TxsdGBSet function is not nil (ie. was set by outside code), calls it with this TxsdGBSet instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGBSet instance.
func (me *TxsdGBSet) Walk() (err error) {
	if fn := WalkHandlers.TxsdGBSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xsd_Elems_GBSeq.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSet struct {
	GBSet *TxsdGBSet `xml:"GBSet"`
}

//	If the WalkHandlers.Xsd_Elem_GBSet function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBSet instance.
func (me *Xsd_Elem_GBSet) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSet struct {
	GBSets []*TxsdGBSet `xml:"GBSet"`
}

//	If the WalkHandlers.Xsd_Elems_GBSet function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSet instance.
func (me *Xsd_Elems_GBSet) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeq struct {
	GBSeq *TxsdGBSeq `xml:"GBSeq"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeq function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeq instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBSeq instance.
func (me *Xsd_Elem_GBSeq) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeq; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBSeq.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSeqid struct {
	GBSeqid xsdt.String `xml:"GBSeqid"`
}

//	If the WalkHandlers.Xsd_Elem_GBSeqid function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSeqid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSeqid instance.
func (me *Xsd_Elem_GBSeqid) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSeqid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBSecondaryAccn struct {
	GBSecondaryAccn xsdt.String `xml:"GBSecondary-accn"`
}

//	If the WalkHandlers.Xsd_Elem_GBSecondaryAccn function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBSecondaryAccn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBSecondaryAccn instance.
func (me *Xsd_Elem_GBSecondaryAccn) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBSecondaryAccn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBKeyword struct {
	GBKeyword xsdt.String `xml:"GBKeyword"`
}

//	If the WalkHandlers.Xsd_Elem_GBKeyword function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBKeyword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBKeyword instance.
func (me *Xsd_Elem_GBKeyword) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBKeyword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBReference struct {
	GBReference *TxsdGBReference `xml:"GBReference"`
}

//	If the WalkHandlers.Xsd_Elem_GBReference function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBReference instance.
func (me *Xsd_Elem_GBReference) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAuthor struct {
	GBAuthor xsdt.String `xml:"GBAuthor"`
}

//	If the WalkHandlers.Xsd_Elem_GBAuthor function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAuthor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBAuthor instance.
func (me *Xsd_Elem_GBAuthor) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAuthor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBXref struct {
	GBXref *TxsdGBXref `xml:"GBXref"`
}

//	If the WalkHandlers.Xsd_Elem_GBXref function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBXref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBXref instance.
func (me *Xsd_Elem_GBXref) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBXref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBXref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBComment struct {
	GBComment *TxsdGBComment `xml:"GBComment"`
}

//	If the WalkHandlers.Xsd_Elem_GBComment function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBComment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBComment instance.
func (me *Xsd_Elem_GBComment) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBComment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBComment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBCommentParagraph struct {
	GBCommentParagraph xsdt.String `xml:"GBCommentParagraph"`
}

//	If the WalkHandlers.Xsd_Elem_GBCommentParagraph function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBCommentParagraph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elem_GBCommentParagraph instance.
func (me *Xsd_Elem_GBCommentParagraph) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBCommentParagraph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBStrucComment struct {
	GBStrucComment *TxsdGBStrucComment `xml:"GBStrucComment"`
}

//	If the WalkHandlers.Xsd_Elem_GBStrucComment function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBStrucComment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBStrucComment instance.
func (me *Xsd_Elem_GBStrucComment) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBStrucComment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBStrucComment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBStrucCommentItem struct {
	GBStrucCommentItem *TxsdGBStrucCommentItem `xml:"GBStrucCommentItem"`
}

//	If the WalkHandlers.Xsd_Elem_GBStrucCommentItem function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBStrucCommentItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBStrucCommentItem instance.
func (me *Xsd_Elem_GBStrucCommentItem) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBStrucCommentItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBStrucCommentItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBFeatureSet struct {
	GBFeatureSet *TxsdGBFeatureSet `xml:"GBFeatureSet"`
}

//	If the WalkHandlers.Xsd_Elem_GBFeatureSet function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBFeatureSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBFeatureSet instance.
func (me *Xsd_Elem_GBFeatureSet) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBFeatureSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBFeatureSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBFeature struct {
	GBFeature *TxsdGBFeature `xml:"GBFeature"`
}

//	If the WalkHandlers.Xsd_Elem_GBFeature function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBFeature instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBFeature instance.
func (me *Xsd_Elem_GBFeature) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBFeature; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBFeature.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBQualifier struct {
	GBQualifier *TxsdGBQualifier `xml:"GBQualifier"`
}

//	If the WalkHandlers.Xsd_Elem_GBQualifier function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBQualifier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBQualifier instance.
func (me *Xsd_Elem_GBQualifier) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBQualifier; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBQualifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAltSeqData struct {
	GBAltSeqData *TxsdGBAltSeqData `xml:"GBAltSeqData"`
}

//	If the WalkHandlers.Xsd_Elem_GBAltSeqData function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAltSeqData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBAltSeqData instance.
func (me *Xsd_Elem_GBAltSeqData) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAltSeqData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBAltSeqData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elem_GBAltSeqItem struct {
	GBAltSeqItem *TxsdGBAltSeqItem `xml:"GBAltSeqItem"`
}

//	If the WalkHandlers.Xsd_Elem_GBAltSeqItem function is not nil (ie. was set by outside code), calls it with this Xsd_Elem_GBAltSeqItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this Xsd_Elem_GBAltSeqItem instance.
func (me *Xsd_Elem_GBAltSeqItem) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elem_GBAltSeqItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GBAltSeqItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBQualifierValueXsdtString0071 struct {
	GBQualifierValues []xsdt.String `xml:"GBQualifier_value"`
}

//	If the WalkHandlers.Xsd_Elems_GBQualifierValueXsdtString0071 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBQualifierValueXsdtString0071 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBQualifierValueXsdtString0071 instance.
func (me *Xsd_Elems_GBQualifierValueXsdtString0071) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBQualifierValueXsdtString0071; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqStrandednessXsdtString0003 struct {
	GBSeqStrandednesses []xsdt.String `xml:"GBSeq_strandedness"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqStrandednessXsdtString0003 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqStrandednessXsdtString0003 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqStrandednessXsdtString0003 instance.
func (me *Xsd_Elems_GBSeqStrandednessXsdtString0003) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqStrandednessXsdtString0003; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqCreateReleaseXsdtString0010 struct {
	GBSeqCreateReleases []xsdt.String `xml:"GBSeq_create-release"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqCreateReleaseXsdtString0010 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqCreateReleaseXsdtString0010 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqCreateReleaseXsdtString0010 instance.
func (me *Xsd_Elems_GBSeqCreateReleaseXsdtString0010) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqCreateReleaseXsdtString0010; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074 struct {
	GBAltSeqItemIntervals []*TxsdGBAltSeqItemInterval `xml:"GBAltSeqItem_interval"`
}

//	If the WalkHandlers.Xsd_Elems_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074 instance.
func (me *Xsd_Elems_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBAltSeqItemIntervals {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqSourceDbXsdtString0028 struct {
	GBSeqSourceDbs []xsdt.String `xml:"GBSeq_source-db"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqSourceDbXsdtString0028 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqSourceDbXsdtString0028 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqSourceDbXsdtString0028 instance.
func (me *Xsd_Elems_GBSeqSourceDbXsdtString0028) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqSourceDbXsdtString0028; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055 struct {
	GBFeatureSetFeatureses []*TxsdGBSeqFeatureTable `xml:"GBFeatureSet_features"`
}

//	If the WalkHandlers.Xsd_Elems_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055 instance.
func (me *Xsd_Elems_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBFeatureSetFeatureses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBReferenceConsortiumXsdtString0039 struct {
	GBReferenceConsortiums []xsdt.String `xml:"GBReference_consortium"`
}

//	If the WalkHandlers.Xsd_Elems_GBReferenceConsortiumXsdtString0039 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBReferenceConsortiumXsdtString0039 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBReferenceConsortiumXsdtString0039 instance.
func (me *Xsd_Elems_GBReferenceConsortiumXsdtString0039) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBReferenceConsortiumXsdtString0039; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqCommentXsdtString0024 struct {
	GBSeqComments []xsdt.String `xml:"GBSeq_comment"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqCommentXsdtString0024 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqCommentXsdtString0024 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqCommentXsdtString0024 instance.
func (me *Xsd_Elems_GBSeqCommentXsdtString0024) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqCommentXsdtString0024; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqUpdateReleaseXsdtString0009 struct {
	GBSeqUpdateReleases []xsdt.String `xml:"GBSeq_update-release"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqUpdateReleaseXsdtString0009 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqUpdateReleaseXsdtString0009 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqUpdateReleaseXsdtString0009 instance.
func (me *Xsd_Elems_GBSeqUpdateReleaseXsdtString0009) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqUpdateReleaseXsdtString0009; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBFeaturePartial5TxsdGBFeaturePartial510060 struct {
	GBFeaturePartial5s []*TxsdGBFeaturePartial51 `xml:"GBFeature_partial5"`
}

//	If the WalkHandlers.Xsd_Elems_GBFeaturePartial5TxsdGBFeaturePartial510060 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBFeaturePartial5TxsdGBFeaturePartial510060 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBFeaturePartial5TxsdGBFeaturePartial510060 instance.
func (me *Xsd_Elems_GBFeaturePartial5TxsdGBFeaturePartial510060) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBFeaturePartial5TxsdGBFeaturePartial510060; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBFeaturePartial5s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBReferencePositionXsdtString0037 struct {
	GBReferencePositions []xsdt.String `xml:"GBReference_position"`
}

//	If the WalkHandlers.Xsd_Elems_GBReferencePositionXsdtString0037 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBReferencePositionXsdtString0037 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBReferencePositionXsdtString0037 instance.
func (me *Xsd_Elems_GBReferencePositionXsdtString0037) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBReferencePositionXsdtString0037; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBReferenceAuthorsTxsdGBReferenceAuthors0038 struct {
	GBReferenceAuthorses []*TxsdGBReferenceAuthors `xml:"GBReference_authors"`
}

//	If the WalkHandlers.Xsd_Elems_GBReferenceAuthorsTxsdGBReferenceAuthors0038 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBReferenceAuthorsTxsdGBReferenceAuthors0038 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBReferenceAuthorsTxsdGBReferenceAuthors0038 instance.
func (me *Xsd_Elems_GBReferenceAuthorsTxsdGBReferenceAuthors0038) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBReferenceAuthorsTxsdGBReferenceAuthors0038; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBReferenceAuthorses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdHasCdata struct {
	XsdCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdHasCdata function is not nil (ie. was set by outside code), calls it with this XsdHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdHasCdata instance.
func (me *XsdHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqAltSeqTxsdGBSeqAltSeq0034 struct {
	GBSeqAltSeqs []*TxsdGBSeqAltSeq `xml:"GBSeq_alt-seq"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqAltSeqTxsdGBSeqAltSeq0034 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqAltSeqTxsdGBSeqAltSeq0034 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqAltSeqTxsdGBSeqAltSeq0034 instance.
func (me *Xsd_Elems_GBSeqAltSeqTxsdGBSeqAltSeq0034) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqAltSeqTxsdGBSeqAltSeq0034; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBSeqAltSeqs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBXrefIdXsdtString0046 struct {
	GBXrefIds []xsdt.String `xml:"GBXref_id"`
}

//	If the WalkHandlers.Xsd_Elems_GBXrefIdXsdtString0046 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBXrefIdXsdtString0046 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBXrefIdXsdtString0046 instance.
func (me *Xsd_Elems_GBXrefIdXsdtString0046) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBXrefIdXsdtString0046; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBFeaturePartial3TxsdGBFeaturePartial310061 struct {
	GBFeaturePartial3s []*TxsdGBFeaturePartial31 `xml:"GBFeature_partial3"`
}

//	If the WalkHandlers.Xsd_Elems_GBFeaturePartial3TxsdGBFeaturePartial310061 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBFeaturePartial3TxsdGBFeaturePartial310061 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBFeaturePartial3TxsdGBFeaturePartial310061 instance.
func (me *Xsd_Elems_GBFeaturePartial3TxsdGBFeaturePartial310061) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBFeaturePartial3TxsdGBFeaturePartial310061; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBFeaturePartial3s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBFeatureSetAnnotSourceXsdtString0054 struct {
	GBFeatureSetAnnotSources []xsdt.String `xml:"GBFeatureSet_annot-source"`
}

//	If the WalkHandlers.Xsd_Elems_GBFeatureSetAnnotSourceXsdtString0054 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBFeatureSetAnnotSourceXsdtString0054 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBFeatureSetAnnotSourceXsdtString0054 instance.
func (me *Xsd_Elems_GBFeatureSetAnnotSourceXsdtString0054) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBFeatureSetAnnotSourceXsdtString0054; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBFeatureQualsTxsdGBFeatureQuals0062 struct {
	GBFeatureQualses []*TxsdGBFeatureQuals `xml:"GBFeature_quals"`
}

//	If the WalkHandlers.Xsd_Elems_GBFeatureQualsTxsdGBFeatureQuals0062 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBFeatureQualsTxsdGBFeatureQuals0062 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBFeatureQualsTxsdGBFeatureQuals0062 instance.
func (me *Xsd_Elems_GBFeatureQualsTxsdGBFeatureQuals0062) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBFeatureQualsTxsdGBFeatureQuals0062; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBFeatureQualses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBIntervalInterbpTxsdGBIntervalInterbp10068 struct {
	GBIntervalInterbps []*TxsdGBIntervalInterbp1 `xml:"GBInterval_interbp"`
}

//	If the WalkHandlers.Xsd_Elems_GBIntervalInterbpTxsdGBIntervalInterbp10068 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBIntervalInterbpTxsdGBIntervalInterbp10068 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBIntervalInterbpTxsdGBIntervalInterbp10068 instance.
func (me *Xsd_Elems_GBIntervalInterbpTxsdGBIntervalInterbp10068) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBIntervalInterbpTxsdGBIntervalInterbp10068; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBIntervalInterbps {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBReferenceReferenceXsdtString0036 struct {
	GBReferenceReferences []xsdt.String `xml:"GBReference_reference"`
}

//	If the WalkHandlers.Xsd_Elems_GBReferenceReferenceXsdtString0036 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBReferenceReferenceXsdtString0036 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBReferenceReferenceXsdtString0036 instance.
func (me *Xsd_Elems_GBReferenceReferenceXsdtString0036) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBReferenceReferenceXsdtString0036; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAltSeqItemValueXsdtString0082 struct {
	GBAltSeqItemValues []xsdt.String `xml:"GBAltSeqItem_value"`
}

//	If the WalkHandlers.Xsd_Elems_GBAltSeqItemValueXsdtString0082 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAltSeqItemValueXsdtString0082 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAltSeqItemValueXsdtString0082 instance.
func (me *Xsd_Elems_GBAltSeqItemValueXsdtString0082) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAltSeqItemValueXsdtString0082; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBXrefDbnameXsdtString0045 struct {
	GBXrefDbnames []xsdt.String `xml:"GBXref_dbname"`
}

//	If the WalkHandlers.Xsd_Elems_GBXrefDbnameXsdtString0045 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBXrefDbnameXsdtString0045 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBXrefDbnameXsdtString0045 instance.
func (me *Xsd_Elems_GBXrefDbnameXsdtString0045) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBXrefDbnameXsdtString0045; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073 struct {
	GBAltSeqDataItemses []*TxsdGBAltSeqDataItems `xml:"GBAltSeqData_items"`
}

//	If the WalkHandlers.Xsd_Elems_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073 instance.
func (me *Xsd_Elems_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBAltSeqDataItemses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqLocusXsdtString0001 struct {
	GBSeqLocuses []xsdt.String `xml:"GBSeq_locus"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqLocusXsdtString0001 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqLocusXsdtString0001 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqLocusXsdtString0001 instance.
func (me *Xsd_Elems_GBSeqLocusXsdtString0001) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqLocusXsdtString0001; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBIntervalToXsdtInteger0065 struct {
	GBIntervalTos []xsdt.Integer `xml:"GBInterval_to"`
}

//	If the WalkHandlers.Xsd_Elems_GBIntervalToXsdtInteger0065 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBIntervalToXsdtInteger0065 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBIntervalToXsdtInteger0065 instance.
func (me *Xsd_Elems_GBIntervalToXsdtInteger0065) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBIntervalToXsdtInteger0065; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqSequenceXsdtString0032 struct {
	GBSeqSequences []xsdt.String `xml:"GBSeq_sequence"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqSequenceXsdtString0032 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqSequenceXsdtString0032 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqSequenceXsdtString0032 instance.
func (me *Xsd_Elems_GBSeqSequenceXsdtString0032) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqSequenceXsdtString0032; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAltSeqItemGapCommentXsdtString0079 struct {
	GBAltSeqItemGapComments []xsdt.String `xml:"GBAltSeqItem_gap-comment"`
}

//	If the WalkHandlers.Xsd_Elems_GBAltSeqItemGapCommentXsdtString0079 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAltSeqItemGapCommentXsdtString0079 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAltSeqItemGapCommentXsdtString0079 instance.
func (me *Xsd_Elems_GBAltSeqItemGapCommentXsdtString0079) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAltSeqItemGapCommentXsdtString0079; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBStrucCommentItemsTxsdGBStrucCommentItems0050 struct {
	GBStrucCommentItemses []*TxsdGBStrucCommentItems `xml:"GBStrucComment_items"`
}

//	If the WalkHandlers.Xsd_Elems_GBStrucCommentItemsTxsdGBStrucCommentItems0050 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBStrucCommentItemsTxsdGBStrucCommentItems0050 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBStrucCommentItemsTxsdGBStrucCommentItems0050 instance.
func (me *Xsd_Elems_GBStrucCommentItemsTxsdGBStrucCommentItems0050) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBStrucCommentItemsTxsdGBStrucCommentItems0050; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBStrucCommentItemses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016 struct {
	GBSeqSecondaryAccessionses []*TxsdGBSeqSecondaryAccessions `xml:"GBSeq_secondary-accessions"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016 instance.
func (me *Xsd_Elems_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBSeqSecondaryAccessionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqDefinitionXsdtString0011 struct {
	GBSeqDefinitions []xsdt.String `xml:"GBSeq_definition"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqDefinitionXsdtString0011 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqDefinitionXsdtString0011 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqDefinitionXsdtString0011 instance.
func (me *Xsd_Elems_GBSeqDefinitionXsdtString0011) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqDefinitionXsdtString0011; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqSourceXsdtString0020 struct {
	GBSeqSources []xsdt.String `xml:"GBSeq_source"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqSourceXsdtString0020 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqSourceXsdtString0020 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqSourceXsdtString0020 instance.
func (me *Xsd_Elems_GBSeqSourceXsdtString0020) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqSourceXsdtString0020; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqKeywordsTxsdGBSeqKeywords0018 struct {
	GBSeqKeywordses []*TxsdGBSeqKeywords `xml:"GBSeq_keywords"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqKeywordsTxsdGBSeqKeywords0018 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqKeywordsTxsdGBSeqKeywords0018 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqKeywordsTxsdGBSeqKeywords0018 instance.
func (me *Xsd_Elems_GBSeqKeywordsTxsdGBSeqKeywords0018) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqKeywordsTxsdGBSeqKeywords0018; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBSeqKeywordses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBQualifierNameXsdtString0070 struct {
	GBQualifierNames []xsdt.String `xml:"GBQualifier_name"`
}

//	If the WalkHandlers.Xsd_Elems_GBQualifierNameXsdtString0070 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBQualifierNameXsdtString0070 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBQualifierNameXsdtString0070 instance.
func (me *Xsd_Elems_GBQualifierNameXsdtString0070) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBQualifierNameXsdtString0070; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqEntryVersionXsdtString0013 struct {
	GBSeqEntryVersions []xsdt.String `xml:"GBSeq_entry-version"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqEntryVersionXsdtString0013 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqEntryVersionXsdtString0013 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqEntryVersionXsdtString0013 instance.
func (me *Xsd_Elems_GBSeqEntryVersionXsdtString0013) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqEntryVersionXsdtString0013; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqProjectXsdtString0017 struct {
	GBSeqProjects []xsdt.String `xml:"GBSeq_project"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqProjectXsdtString0017 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqProjectXsdtString0017 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqProjectXsdtString0017 instance.
func (me *Xsd_Elems_GBSeqProjectXsdtString0017) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqProjectXsdtString0017; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBFeatureLocationXsdtString0057 struct {
	GBFeatureLocations []xsdt.String `xml:"GBFeature_location"`
}

//	If the WalkHandlers.Xsd_Elems_GBFeatureLocationXsdtString0057 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBFeatureLocationXsdtString0057 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBFeatureLocationXsdtString0057 instance.
func (me *Xsd_Elems_GBFeatureLocationXsdtString0057) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBFeatureLocationXsdtString0057; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqXrefsTxsdGBSeqXrefs0035 struct {
	GBSeqXrefses []*TxsdGBReferenceXref `xml:"GBSeq_xrefs"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqXrefsTxsdGBSeqXrefs0035 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqXrefsTxsdGBSeqXrefs0035 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqXrefsTxsdGBSeqXrefs0035 instance.
func (me *Xsd_Elems_GBSeqXrefsTxsdGBSeqXrefs0035) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqXrefsTxsdGBSeqXrefs0035; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBSeqXrefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBFeatureOperatorXsdtString0059 struct {
	GBFeatureOperators []xsdt.String `xml:"GBFeature_operator"`
}

//	If the WalkHandlers.Xsd_Elems_GBFeatureOperatorXsdtString0059 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBFeatureOperatorXsdtString0059 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBFeatureOperatorXsdtString0059 instance.
func (me *Xsd_Elems_GBFeatureOperatorXsdtString0059) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBFeatureOperatorXsdtString0059; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBReferenceTitleXsdtString0040 struct {
	GBReferenceTitles []xsdt.String `xml:"GBReference_title"`
}

//	If the WalkHandlers.Xsd_Elems_GBReferenceTitleXsdtString0040 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBReferenceTitleXsdtString0040 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBReferenceTitleXsdtString0040 instance.
func (me *Xsd_Elems_GBReferenceTitleXsdtString0040) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBReferenceTitleXsdtString0040; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAltSeqItemFirstAccnXsdtString0080 struct {
	GBAltSeqItemFirstAccns []xsdt.String `xml:"GBAltSeqItem_first-accn"`
}

//	If the WalkHandlers.Xsd_Elems_GBAltSeqItemFirstAccnXsdtString0080 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAltSeqItemFirstAccnXsdtString0080 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAltSeqItemFirstAccnXsdtString0080 instance.
func (me *Xsd_Elems_GBAltSeqItemFirstAccnXsdtString0080) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAltSeqItemFirstAccnXsdtString0080; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqCreateDateXsdtString0008 struct {
	GBSeqCreateDates []xsdt.String `xml:"GBSeq_create-date"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqCreateDateXsdtString0008 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqCreateDateXsdtString0008 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqCreateDateXsdtString0008 instance.
func (me *Xsd_Elems_GBSeqCreateDateXsdtString0008) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqCreateDateXsdtString0008; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqLengthXsdtInteger0002 struct {
	GBSeqLengths []xsdt.Integer `xml:"GBSeq_length"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqLengthXsdtInteger0002 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqLengthXsdtInteger0002 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqLengthXsdtInteger0002 instance.
func (me *Xsd_Elems_GBSeqLengthXsdtInteger0002) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqLengthXsdtInteger0002; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqOrganismXsdtString0021 struct {
	GBSeqOrganisms []xsdt.String `xml:"GBSeq_organism"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqOrganismXsdtString0021 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqOrganismXsdtString0021 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqOrganismXsdtString0021 instance.
func (me *Xsd_Elems_GBSeqOrganismXsdtString0021) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqOrganismXsdtString0021; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqDatabaseReferenceXsdtString0029 struct {
	GBSeqDatabaseReferences []xsdt.String `xml:"GBSeq_database-reference"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqDatabaseReferenceXsdtString0029 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqDatabaseReferenceXsdtString0029 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqDatabaseReferenceXsdtString0029 instance.
func (me *Xsd_Elems_GBSeqDatabaseReferenceXsdtString0029) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqDatabaseReferenceXsdtString0029; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqFeatureTableTxsdGBSeqFeatureTable0030 struct {
	GBSeqFeatureTables []*TxsdGBSeqFeatureTable `xml:"GBSeq_feature-table"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqFeatureTableTxsdGBSeqFeatureTable0030 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqFeatureTableTxsdGBSeqFeatureTable0030 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqFeatureTableTxsdGBSeqFeatureTable0030 instance.
func (me *Xsd_Elems_GBSeqFeatureTableTxsdGBSeqFeatureTable0030) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqFeatureTableTxsdGBSeqFeatureTable0030; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBSeqFeatureTables {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAltSeqItemGapTypeXsdtString0077 struct {
	GBAltSeqItemGapTypes []xsdt.String `xml:"GBAltSeqItem_gap-type"`
}

//	If the WalkHandlers.Xsd_Elems_GBAltSeqItemGapTypeXsdtString0077 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAltSeqItemGapTypeXsdtString0077 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAltSeqItemGapTypeXsdtString0077 instance.
func (me *Xsd_Elems_GBAltSeqItemGapTypeXsdtString0077) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAltSeqItemGapTypeXsdtString0077; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBReferencePubmedXsdtInteger0043 struct {
	GBReferencePubmeds []xsdt.Integer `xml:"GBReference_pubmed"`
}

//	If the WalkHandlers.Xsd_Elems_GBReferencePubmedXsdtInteger0043 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBReferencePubmedXsdtInteger0043 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBReferencePubmedXsdtInteger0043 instance.
func (me *Xsd_Elems_GBReferencePubmedXsdtInteger0043) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBReferencePubmedXsdtInteger0043; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBStrucCommentItemValueXsdtString0052 struct {
	GBStrucCommentItemValues []xsdt.String `xml:"GBStrucCommentItem_value"`
}

//	If the WalkHandlers.Xsd_Elems_GBStrucCommentItemValueXsdtString0052 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBStrucCommentItemValueXsdtString0052 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBStrucCommentItemValueXsdtString0052 instance.
func (me *Xsd_Elems_GBStrucCommentItemValueXsdtString0052) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBStrucCommentItemValueXsdtString0052; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqPrimaryAccessionXsdtString0012 struct {
	GBSeqPrimaryAccessions []xsdt.String `xml:"GBSeq_primary-accession"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqPrimaryAccessionXsdtString0012 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqPrimaryAccessionXsdtString0012 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqPrimaryAccessionXsdtString0012 instance.
func (me *Xsd_Elems_GBSeqPrimaryAccessionXsdtString0012) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqPrimaryAccessionXsdtString0012; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBReferenceXrefTxsdGBReferenceXref0042 struct {
	GBReferenceXrefs []*TxsdGBReferenceXref `xml:"GBReference_xref"`
}

//	If the WalkHandlers.Xsd_Elems_GBReferenceXrefTxsdGBReferenceXref0042 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBReferenceXrefTxsdGBReferenceXref0042 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBReferenceXrefTxsdGBReferenceXref0042 instance.
func (me *Xsd_Elems_GBReferenceXrefTxsdGBReferenceXref0042) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBReferenceXrefTxsdGBReferenceXref0042; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBReferenceXrefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAltSeqDataNameXsdtString0072 struct {
	GBAltSeqDataNames []xsdt.String `xml:"GBAltSeqData_name"`
}

//	If the WalkHandlers.Xsd_Elems_GBAltSeqDataNameXsdtString0072 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAltSeqDataNameXsdtString0072 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAltSeqDataNameXsdtString0072 instance.
func (me *Xsd_Elems_GBAltSeqDataNameXsdtString0072) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAltSeqDataNameXsdtString0072; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqReferencesTxsdGBSeqReferences0023 struct {
	GBSeqReferenceses []*TxsdGBSeqReferences `xml:"GBSeq_references"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqReferencesTxsdGBSeqReferences0023 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqReferencesTxsdGBSeqReferences0023 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqReferencesTxsdGBSeqReferences0023 instance.
func (me *Xsd_Elems_GBSeqReferencesTxsdGBSeqReferences0023) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqReferencesTxsdGBSeqReferences0023; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBSeqReferenceses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBIntervalAccessionXsdtString0069 struct {
	GBIntervalAccessions []xsdt.String `xml:"GBInterval_accession"`
}

//	If the WalkHandlers.Xsd_Elems_GBIntervalAccessionXsdtString0069 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBIntervalAccessionXsdtString0069 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBIntervalAccessionXsdtString0069 instance.
func (me *Xsd_Elems_GBIntervalAccessionXsdtString0069) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBIntervalAccessionXsdtString0069; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBFeatureXrefsTxsdGBFeatureXrefs0063 struct {
	GBFeatureXrefses []*TxsdGBReferenceXref `xml:"GBFeature_xrefs"`
}

//	If the WalkHandlers.Xsd_Elems_GBFeatureXrefsTxsdGBFeatureXrefs0063 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBFeatureXrefsTxsdGBFeatureXrefs0063 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBFeatureXrefsTxsdGBFeatureXrefs0063 instance.
func (me *Xsd_Elems_GBFeatureXrefsTxsdGBFeatureXrefs0063) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBFeatureXrefsTxsdGBFeatureXrefs0063; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBFeatureXrefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqDivisionXsdtString0006 struct {
	GBSeqDivisions []xsdt.String `xml:"GBSeq_division"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqDivisionXsdtString0006 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqDivisionXsdtString0006 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqDivisionXsdtString0006 instance.
func (me *Xsd_Elems_GBSeqDivisionXsdtString0006) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqDivisionXsdtString0006; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBStrucCommentItemUrlXsdtString0053 struct {
	GBStrucCommentItemUrls []xsdt.String `xml:"GBStrucCommentItem_url"`
}

//	If the WalkHandlers.Xsd_Elems_GBStrucCommentItemUrlXsdtString0053 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBStrucCommentItemUrlXsdtString0053 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBStrucCommentItemUrlXsdtString0053 instance.
func (me *Xsd_Elems_GBStrucCommentItemUrlXsdtString0053) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBStrucCommentItemUrlXsdtString0053; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBFeatureKeyXsdtString0056 struct {
	GBFeatureKeys []xsdt.String `xml:"GBFeature_key"`
}

//	If the WalkHandlers.Xsd_Elems_GBFeatureKeyXsdtString0056 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBFeatureKeyXsdtString0056 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBFeatureKeyXsdtString0056 instance.
func (me *Xsd_Elems_GBFeatureKeyXsdtString0056) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBFeatureKeyXsdtString0056; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqTaxonomyXsdtString0022 struct {
	GBSeqTaxonomies []xsdt.String `xml:"GBSeq_taxonomy"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqTaxonomyXsdtString0022 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqTaxonomyXsdtString0022 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqTaxonomyXsdtString0022 instance.
func (me *Xsd_Elems_GBSeqTaxonomyXsdtString0022) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqTaxonomyXsdtString0022; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAltSeqItemGapLengthXsdtInteger0076 struct {
	GBAltSeqItemGapLengths []xsdt.Integer `xml:"GBAltSeqItem_gap-length"`
}

//	If the WalkHandlers.Xsd_Elems_GBAltSeqItemGapLengthXsdtInteger0076 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAltSeqItemGapLengthXsdtInteger0076 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAltSeqItemGapLengthXsdtInteger0076 instance.
func (me *Xsd_Elems_GBAltSeqItemGapLengthXsdtInteger0076) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAltSeqItemGapLengthXsdtInteger0076; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBReferenceJournalXsdtString0041 struct {
	GBReferenceJournals []xsdt.String `xml:"GBReference_journal"`
}

//	If the WalkHandlers.Xsd_Elems_GBReferenceJournalXsdtString0041 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBReferenceJournalXsdtString0041 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBReferenceJournalXsdtString0041 instance.
func (me *Xsd_Elems_GBReferenceJournalXsdtString0041) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBReferenceJournalXsdtString0041; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015 struct {
	GBSeqOtherSeqidses []*TxsdGBSeqOtherSeqids `xml:"GBSeq_other-seqids"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015 instance.
func (me *Xsd_Elems_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBSeqOtherSeqidses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBStrucCommentItemTagXsdtString0051 struct {
	GBStrucCommentItemTags []xsdt.String `xml:"GBStrucCommentItem_tag"`
}

//	If the WalkHandlers.Xsd_Elems_GBStrucCommentItemTagXsdtString0051 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBStrucCommentItemTagXsdtString0051 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBStrucCommentItemTagXsdtString0051 instance.
func (me *Xsd_Elems_GBStrucCommentItemTagXsdtString0051) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBStrucCommentItemTagXsdtString0051; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqAccessionVersionXsdtString0014 struct {
	GBSeqAccessionVersions []xsdt.String `xml:"GBSeq_accession-version"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqAccessionVersionXsdtString0014 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqAccessionVersionXsdtString0014 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqAccessionVersionXsdtString0014 instance.
func (me *Xsd_Elems_GBSeqAccessionVersionXsdtString0014) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqAccessionVersionXsdtString0014; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqCommentSetTxsdGBSeqCommentSet0025 struct {
	GBSeqCommentSets []*TxsdGBSeqCommentSet `xml:"GBSeq_comment-set"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqCommentSetTxsdGBSeqCommentSet0025 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqCommentSetTxsdGBSeqCommentSet0025 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqCommentSetTxsdGBSeqCommentSet0025 instance.
func (me *Xsd_Elems_GBSeqCommentSetTxsdGBSeqCommentSet0025) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqCommentSetTxsdGBSeqCommentSet0025; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBSeqCommentSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBFeatureIntervalsTxsdGBFeatureIntervals0058 struct {
	GBFeatureIntervalses []*TxsdGBFeatureIntervals `xml:"GBFeature_intervals"`
}

//	If the WalkHandlers.Xsd_Elems_GBFeatureIntervalsTxsdGBFeatureIntervals0058 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBFeatureIntervalsTxsdGBFeatureIntervals0058 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBFeatureIntervalsTxsdGBFeatureIntervals0058 instance.
func (me *Xsd_Elems_GBFeatureIntervalsTxsdGBFeatureIntervals0058) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBFeatureIntervalsTxsdGBFeatureIntervals0058; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBFeatureIntervalses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqMoltypeXsdtString0004 struct {
	GBSeqMoltypes []xsdt.String `xml:"GBSeq_moltype"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqMoltypeXsdtString0004 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqMoltypeXsdtString0004 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqMoltypeXsdtString0004 instance.
func (me *Xsd_Elems_GBSeqMoltypeXsdtString0004) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqMoltypeXsdtString0004; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqSegmentXsdtString0019 struct {
	GBSeqSegments []xsdt.String `xml:"GBSeq_segment"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqSegmentXsdtString0019 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqSegmentXsdtString0019 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqSegmentXsdtString0019 instance.
func (me *Xsd_Elems_GBSeqSegmentXsdtString0019) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqSegmentXsdtString0019; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075 struct {
	GBAltSeqItemIsgaps []*TxsdGBAltSeqItemIsgap1 `xml:"GBAltSeqItem_isgap"`
}

//	If the WalkHandlers.Xsd_Elems_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075 instance.
func (me *Xsd_Elems_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBAltSeqItemIsgaps {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAltSeqItemGapLinkageXsdtString0078 struct {
	GBAltSeqItemGapLinkages []xsdt.String `xml:"GBAltSeqItem_gap-linkage"`
}

//	If the WalkHandlers.Xsd_Elems_GBAltSeqItemGapLinkageXsdtString0078 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAltSeqItemGapLinkageXsdtString0078 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAltSeqItemGapLinkageXsdtString0078 instance.
func (me *Xsd_Elems_GBAltSeqItemGapLinkageXsdtString0078) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAltSeqItemGapLinkageXsdtString0078; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBStrucCommentNameXsdtString0049 struct {
	GBStrucCommentNames []xsdt.String `xml:"GBStrucComment_name"`
}

//	If the WalkHandlers.Xsd_Elems_GBStrucCommentNameXsdtString0049 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBStrucCommentNameXsdtString0049 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBStrucCommentNameXsdtString0049 instance.
func (me *Xsd_Elems_GBStrucCommentNameXsdtString0049) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBStrucCommentNameXsdtString0049; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqContigXsdtString0033 struct {
	GBSeqContigs []xsdt.String `xml:"GBSeq_contig"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqContigXsdtString0033 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqContigXsdtString0033 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqContigXsdtString0033 instance.
func (me *Xsd_Elems_GBSeqContigXsdtString0033) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqContigXsdtString0033; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqPrimaryXsdtString0027 struct {
	GBSeqPrimaries []xsdt.String `xml:"GBSeq_primary"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqPrimaryXsdtString0027 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqPrimaryXsdtString0027 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqPrimaryXsdtString0027 instance.
func (me *Xsd_Elems_GBSeqPrimaryXsdtString0027) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqPrimaryXsdtString0027; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqUpdateDateXsdtString0007 struct {
	GBSeqUpdateDates []xsdt.String `xml:"GBSeq_update-date"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqUpdateDateXsdtString0007 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqUpdateDateXsdtString0007 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqUpdateDateXsdtString0007 instance.
func (me *Xsd_Elems_GBSeqUpdateDateXsdtString0007) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqUpdateDateXsdtString0007; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBCommentTypeXsdtString0047 struct {
	GBCommentTypes []xsdt.String `xml:"GBComment_type"`
}

//	If the WalkHandlers.Xsd_Elems_GBCommentTypeXsdtString0047 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBCommentTypeXsdtString0047 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBCommentTypeXsdtString0047 instance.
func (me *Xsd_Elems_GBCommentTypeXsdtString0047) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBCommentTypeXsdtString0047; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqStrucCommentsTxsdGBSeqStrucComments0026 struct {
	GBSeqStrucCommentses []*TxsdGBSeqStrucComments `xml:"GBSeq_struc-comments"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqStrucCommentsTxsdGBSeqStrucComments0026 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqStrucCommentsTxsdGBSeqStrucComments0026 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqStrucCommentsTxsdGBSeqStrucComments0026 instance.
func (me *Xsd_Elems_GBSeqStrucCommentsTxsdGBSeqStrucComments0026) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqStrucCommentsTxsdGBSeqStrucComments0026; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBSeqStrucCommentses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBIntervalIscompTxsdGBIntervalIscomp10067 struct {
	GBIntervalIscomps []*TxsdGBIntervalIscomp1 `xml:"GBInterval_iscomp"`
}

//	If the WalkHandlers.Xsd_Elems_GBIntervalIscompTxsdGBIntervalIscomp10067 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBIntervalIscompTxsdGBIntervalIscomp10067 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBIntervalIscompTxsdGBIntervalIscomp10067 instance.
func (me *Xsd_Elems_GBIntervalIscompTxsdGBIntervalIscomp10067) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBIntervalIscompTxsdGBIntervalIscomp10067; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBIntervalIscomps {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBAltSeqItemLastAccnXsdtString0081 struct {
	GBAltSeqItemLastAccns []xsdt.String `xml:"GBAltSeqItem_last-accn"`
}

//	If the WalkHandlers.Xsd_Elems_GBAltSeqItemLastAccnXsdtString0081 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBAltSeqItemLastAccnXsdtString0081 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBAltSeqItemLastAccnXsdtString0081 instance.
func (me *Xsd_Elems_GBAltSeqItemLastAccnXsdtString0081) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBAltSeqItemLastAccnXsdtString0081; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqTopologyXsdtString0005 struct {
	GBSeqTopologies []xsdt.String `xml:"GBSeq_topology"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqTopologyXsdtString0005 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqTopologyXsdtString0005 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqTopologyXsdtString0005 instance.
func (me *Xsd_Elems_GBSeqTopologyXsdtString0005) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqTopologyXsdtString0005; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBIntervalPointXsdtInteger0066 struct {
	GBIntervalPoints []xsdt.Integer `xml:"GBInterval_point"`
}

//	If the WalkHandlers.Xsd_Elems_GBIntervalPointXsdtInteger0066 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBIntervalPointXsdtInteger0066 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBIntervalPointXsdtInteger0066 instance.
func (me *Xsd_Elems_GBIntervalPointXsdtInteger0066) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBIntervalPointXsdtInteger0066; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBIntervalFromXsdtInteger0064 struct {
	GBIntervalFroms []xsdt.Integer `xml:"GBInterval_from"`
}

//	If the WalkHandlers.Xsd_Elems_GBIntervalFromXsdtInteger0064 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBIntervalFromXsdtInteger0064 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBIntervalFromXsdtInteger0064 instance.
func (me *Xsd_Elems_GBIntervalFromXsdtInteger0064) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBIntervalFromXsdtInteger0064; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBCommentParagraphsTxsdGBCommentParagraphs0048 struct {
	GBCommentParagraphses []*TxsdGBCommentParagraphs `xml:"GBComment_paragraphs"`
}

//	If the WalkHandlers.Xsd_Elems_GBCommentParagraphsTxsdGBCommentParagraphs0048 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBCommentParagraphsTxsdGBCommentParagraphs0048 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBCommentParagraphsTxsdGBCommentParagraphs0048 instance.
func (me *Xsd_Elems_GBCommentParagraphsTxsdGBCommentParagraphs0048) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBCommentParagraphsTxsdGBCommentParagraphs0048; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBCommentParagraphses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBReferenceRemarkXsdtString0044 struct {
	GBReferenceRemarks []xsdt.String `xml:"GBReference_remark"`
}

//	If the WalkHandlers.Xsd_Elems_GBReferenceRemarkXsdtString0044 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBReferenceRemarkXsdtString0044 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBReferenceRemarkXsdtString0044 instance.
func (me *Xsd_Elems_GBReferenceRemarkXsdtString0044) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBReferenceRemarkXsdtString0044; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Xsd_Elems_GBSeqFeatureSetTxsdGBSeqFeatureSet0031 struct {
	GBSeqFeatureSets []*TxsdGBSeqFeatureSet `xml:"GBSeq_feature-set"`
}

//	If the WalkHandlers.Xsd_Elems_GBSeqFeatureSetTxsdGBSeqFeatureSet0031 function is not nil (ie. was set by outside code), calls it with this Xsd_Elems_GBSeqFeatureSetTxsdGBSeqFeatureSet0031 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this Xsd_Elems_GBSeqFeatureSetTxsdGBSeqFeatureSet0031 instance.
func (me *Xsd_Elems_GBSeqFeatureSetTxsdGBSeqFeatureSet0031) Walk() (err error) {
	if fn := WalkHandlers.Xsd_Elems_GBSeqFeatureSetTxsdGBSeqFeatureSet0031; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GBSeqFeatureSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 236 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdWalkHandlers{}
)

//	Provides 236 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdWalkHandlers struct {
	TxsdGBSeqCommentSet                                                func(*TxsdGBSeqCommentSet, bool) error
	TxsdGBSeqSecondaryAccessions                                       func(*TxsdGBSeqSecondaryAccessions, bool) error
	TxsdGBFeatureIntervals                                             func(*TxsdGBFeatureIntervals, bool) error
	Xsd_Elem_GBQualifierNameXsdtString0070                             func(*Xsd_Elem_GBQualifierNameXsdtString0070, bool) error
	Xsd_Elem_GBSet                                                     func(*Xsd_Elem_GBSet, bool) error
	Xsd_Elems_GBStrucCommentItemTagXsdtString0051                      func(*Xsd_Elems_GBStrucCommentItemTagXsdtString0051, bool) error
	Xsd_Elem_GBStrucCommentItemTagXsdtString0051                       func(*Xsd_Elem_GBStrucCommentItemTagXsdtString0051, bool) error
	Xsd_Elem_GBSeqOrganismXsdtString0021                               func(*Xsd_Elem_GBSeqOrganismXsdtString0021, bool) error
	Xsd_Elem_GBSeq                                                     func(*Xsd_Elem_GBSeq, bool) error
	Xsd_Elems_GBAltSeqDataNameXsdtString0072                           func(*Xsd_Elems_GBAltSeqDataNameXsdtString0072, bool) error
	TxsdGBStrucComment                                                 func(*TxsdGBStrucComment, bool) error
	Xsd_Elems_GBReferenceConsortiumXsdtString0039                      func(*Xsd_Elems_GBReferenceConsortiumXsdtString0039, bool) error
	Xsd_Elem_GBSeqLocusXsdtString0001                                  func(*Xsd_Elem_GBSeqLocusXsdtString0001, bool) error
	Xsd_Elem_GBSeqContigXsdtString0033                                 func(*Xsd_Elem_GBSeqContigXsdtString0033, bool) error
	Xsd_Elem_GBXref                                                    func(*Xsd_Elem_GBXref, bool) error
	Xsd_Elem_GBStrucComment                                            func(*Xsd_Elem_GBStrucComment, bool) error
	Xsd_Elem_GBSeqCreateReleaseXsdtString0010                          func(*Xsd_Elem_GBSeqCreateReleaseXsdtString0010, bool) error
	Xsd_Elems_GBQualifier                                              func(*Xsd_Elems_GBQualifier, bool) error
	Xsd_Elem_GBSeqid                                                   func(*Xsd_Elem_GBSeqid, bool) error
	Xsd_Elems_GBSeqSourceXsdtString0020                                func(*Xsd_Elems_GBSeqSourceXsdtString0020, bool) error
	Xsd_Elems_GBIntervalAccessionXsdtString0069                        func(*Xsd_Elems_GBIntervalAccessionXsdtString0069, bool) error
	Xsd_Elem_GBSeqTaxonomyXsdtString0022                               func(*Xsd_Elem_GBSeqTaxonomyXsdtString0022, bool) error
	Xsd_Elem_GBSeqDefinitionXsdtString0011                             func(*Xsd_Elem_GBSeqDefinitionXsdtString0011, bool) error
	Xsd_Elems_GBFeatureKeyXsdtString0056                               func(*Xsd_Elems_GBFeatureKeyXsdtString0056, bool) error
	TxsdGBCommentParagraphs                                            func(*TxsdGBCommentParagraphs, bool) error
	TxsdGBFeaturePartial51                                             func(*TxsdGBFeaturePartial51, bool) error
	TxsdGBSeqFeatureTable                                              func(*TxsdGBSeqFeatureTable, bool) error
	Xsd_Elem_GBAltSeqDataNameXsdtString0072                            func(*Xsd_Elem_GBAltSeqDataNameXsdtString0072, bool) error
	Xsd_Elems_GBFeatureOperatorXsdtString0059                          func(*Xsd_Elems_GBFeatureOperatorXsdtString0059, bool) error
	Xsd_Elems_GBSeqCommentSetTxsdGBSeqCommentSet0025                   func(*Xsd_Elems_GBSeqCommentSetTxsdGBSeqCommentSet0025, bool) error
	Xsd_Elems_GBIntervalFromXsdtInteger0064                            func(*Xsd_Elems_GBIntervalFromXsdtInteger0064, bool) error
	Xsd_Elem_GBSeqSegmentXsdtString0019                                func(*Xsd_Elem_GBSeqSegmentXsdtString0019, bool) error
	XsdHasCdata                                                        func(*XsdHasCdata, bool) error
	Xsd_Elems_GBSeqSequenceXsdtString0032                              func(*Xsd_Elems_GBSeqSequenceXsdtString0032, bool) error
	Xsd_Elems_GBSeqUpdateDateXsdtString0007                            func(*Xsd_Elems_GBSeqUpdateDateXsdtString0007, bool) error
	Xsd_Elem_GBSeqAccessionVersionXsdtString0014                       func(*Xsd_Elem_GBSeqAccessionVersionXsdtString0014, bool) error
	Xsd_Elem_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016  func(*Xsd_Elem_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016, bool) error
	Xsd_Elems_GBSeqCreateDateXsdtString0008                            func(*Xsd_Elems_GBSeqCreateDateXsdtString0008, bool) error
	Xsd_Elems_GBStrucCommentNameXsdtString0049                         func(*Xsd_Elems_GBStrucCommentNameXsdtString0049, bool) error
	Xsd_Elems_GBSeqFeatureSetTxsdGBSeqFeatureSet0031                   func(*Xsd_Elems_GBSeqFeatureSetTxsdGBSeqFeatureSet0031, bool) error
	Xsd_Elem_GBSeqStrucCommentsTxsdGBSeqStrucComments0026              func(*Xsd_Elem_GBSeqStrucCommentsTxsdGBSeqStrucComments0026, bool) error
	Xsd_Elem_GBSeqTopologyXsdtString0005                               func(*Xsd_Elem_GBSeqTopologyXsdtString0005, bool) error
	Xsd_Elem_GBSeqReferencesTxsdGBSeqReferences0023                    func(*Xsd_Elem_GBSeqReferencesTxsdGBSeqReferences0023, bool) error
	TxsdGBSet                                                          func(*TxsdGBSet, bool) error
	Xsd_Elems_GBSecondaryAccn                                          func(*Xsd_Elems_GBSecondaryAccn, bool) error
	Xsd_Elem_GBXrefIdXsdtString0046                                    func(*Xsd_Elem_GBXrefIdXsdtString0046, bool) error
	Xsd_Elem_GBFeatureKeyXsdtString0056                                func(*Xsd_Elem_GBFeatureKeyXsdtString0056, bool) error
	Xsd_Elems_GBSeqSourceDbXsdtString0028                              func(*Xsd_Elems_GBSeqSourceDbXsdtString0028, bool) error
	Xsd_Elems_GBAltSeqItemGapTypeXsdtString0077                        func(*Xsd_Elems_GBAltSeqItemGapTypeXsdtString0077, bool) error
	Xsd_Elem_GBStrucCommentNameXsdtString0049                          func(*Xsd_Elem_GBStrucCommentNameXsdtString0049, bool) error
	TxsdGBSeqStrucComments                                             func(*TxsdGBSeqStrucComments, bool) error
	Xsd_Elem_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015                  func(*Xsd_Elem_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015, bool) error
	Xsd_Elem_GBFeatureOperatorXsdtString0059                           func(*Xsd_Elem_GBFeatureOperatorXsdtString0059, bool) error
	Xsd_Elem_GBCommentParagraph                                        func(*Xsd_Elem_GBCommentParagraph, bool) error
	Xsd_Elems_GBStrucCommentItemUrlXsdtString0053                      func(*Xsd_Elems_GBStrucCommentItemUrlXsdtString0053, bool) error
	Xsd_Elem_GBReferenceConsortiumXsdtString0039                       func(*Xsd_Elem_GBReferenceConsortiumXsdtString0039, bool) error
	Xsd_Elems_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015                 func(*Xsd_Elems_GBSeqOtherSeqidsTxsdGBSeqOtherSeqids0015, bool) error
	Xsd_Elems_GBXref                                                   func(*Xsd_Elems_GBXref, bool) error
	Xsd_Elems_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073               func(*Xsd_Elems_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073, bool) error
	Xsd_Elem_GBCommentParagraphsTxsdGBCommentParagraphs0048            func(*Xsd_Elem_GBCommentParagraphsTxsdGBCommentParagraphs0048, bool) error
	Xsd_Elem_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073                func(*Xsd_Elem_GBAltSeqDataItemsTxsdGBAltSeqDataItems0073, bool) error
	Xsd_Elems_GBSeqTopologyXsdtString0005                              func(*Xsd_Elems_GBSeqTopologyXsdtString0005, bool) error
	Xsd_Elems_GBAltSeqItemLastAccnXsdtString0081                       func(*Xsd_Elems_GBAltSeqItemLastAccnXsdtString0081, bool) error
	Xsd_Elem_GBStrucCommentItemsTxsdGBStrucCommentItems0050            func(*Xsd_Elem_GBStrucCommentItemsTxsdGBStrucCommentItems0050, bool) error
	TxsdGBComment                                                      func(*TxsdGBComment, bool) error
	Xsd_Elem_GBSeqSourceDbXsdtString0028                               func(*Xsd_Elem_GBSeqSourceDbXsdtString0028, bool) error
	Xsd_Elem_GBSeqLengthXsdtInteger0002                                func(*Xsd_Elem_GBSeqLengthXsdtInteger0002, bool) error
	TxsdGBSeqKeywords                                                  func(*TxsdGBSeqKeywords, bool) error
	Xsd_Elems_GBFeature                                                func(*Xsd_Elems_GBFeature, bool) error
	TxsdGBFeatureSet                                                   func(*TxsdGBFeatureSet, bool) error
	Xsd_Elems_GBKeyword                                                func(*Xsd_Elems_GBKeyword, bool) error
	Xsd_Elem_GBFeatureSetAnnotSourceXsdtString0054                     func(*Xsd_Elem_GBFeatureSetAnnotSourceXsdtString0054, bool) error
	Xsd_Elem_GBAltSeqItemGapCommentXsdtString0079                      func(*Xsd_Elem_GBAltSeqItemGapCommentXsdtString0079, bool) error
	Xsd_Elem_GBSecondaryAccn                                           func(*Xsd_Elem_GBSecondaryAccn, bool) error
	Xsd_Elems_GBQualifierValueXsdtString0071                           func(*Xsd_Elems_GBQualifierValueXsdtString0071, bool) error
	Xsd_Elems_GBIntervalToXsdtInteger0065                              func(*Xsd_Elems_GBIntervalToXsdtInteger0065, bool) error
	Xsd_Elems_GBSeqOrganismXsdtString0021                              func(*Xsd_Elems_GBSeqOrganismXsdtString0021, bool) error
	Xsd_Elem_GBCommentTypeXsdtString0047                               func(*Xsd_Elem_GBCommentTypeXsdtString0047, bool) error
	Xsd_Elem_GBFeaturePartial3TxsdGBFeaturePartial310061               func(*Xsd_Elem_GBFeaturePartial3TxsdGBFeaturePartial310061, bool) error
	Xsd_Elem_GBQualifierValueXsdtString0071                            func(*Xsd_Elem_GBQualifierValueXsdtString0071, bool) error
	Xsd_Elems_GBSeqUpdateReleaseXsdtString0009                         func(*Xsd_Elems_GBSeqUpdateReleaseXsdtString0009, bool) error
	Xsd_Elems_GBSeqReferencesTxsdGBSeqReferences0023                   func(*Xsd_Elems_GBSeqReferencesTxsdGBSeqReferences0023, bool) error
	Xsd_Elems_GBSeqContigXsdtString0033                                func(*Xsd_Elems_GBSeqContigXsdtString0033, bool) error
	Xsd_Elems_GBSeqStrucCommentsTxsdGBSeqStrucComments0026             func(*Xsd_Elems_GBSeqStrucCommentsTxsdGBSeqStrucComments0026, bool) error
	TxsdGBReferenceAuthors                                             func(*TxsdGBReferenceAuthors, bool) error
	Xsd_Elems_GBFeatureSet                                             func(*Xsd_Elems_GBFeatureSet, bool) error
	Xsd_Elems_GBSet                                                    func(*Xsd_Elems_GBSet, bool) error
	Xsd_Elem_GBStrucCommentItemUrlXsdtString0053                       func(*Xsd_Elem_GBStrucCommentItemUrlXsdtString0053, bool) error
	Xsd_Elems_GBStrucCommentItemsTxsdGBStrucCommentItems0050           func(*Xsd_Elems_GBStrucCommentItemsTxsdGBStrucCommentItems0050, bool) error
	Xsd_Elems_GBAltSeqItemGapLengthXsdtInteger0076                     func(*Xsd_Elems_GBAltSeqItemGapLengthXsdtInteger0076, bool) error
	Xsd_Elem_GBSeqCommentSetTxsdGBSeqCommentSet0025                    func(*Xsd_Elem_GBSeqCommentSetTxsdGBSeqCommentSet0025, bool) error
	TxsdGBInterval                                                     func(*TxsdGBInterval, bool) error
	Xsd_Elem_GBFeaturePartial5TxsdGBFeaturePartial510060               func(*Xsd_Elem_GBFeaturePartial5TxsdGBFeaturePartial510060, bool) error
	TxsdGBFeaturePartial31                                             func(*TxsdGBFeaturePartial31, bool) error
	Xsd_Elem_GBAltSeqItemGapLengthXsdtInteger0076                      func(*Xsd_Elem_GBAltSeqItemGapLengthXsdtInteger0076, bool) error
	Xsd_Elems_GBReferenceRemarkXsdtString0044                          func(*Xsd_Elems_GBReferenceRemarkXsdtString0044, bool) error
	Xsd_Elems_GBAuthor                                                 func(*Xsd_Elems_GBAuthor, bool) error
	Xsd_Elem_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055          func(*Xsd_Elem_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055, bool) error
	Xsd_Elem_GBSeqFeatureSetTxsdGBSeqFeatureSet0031                    func(*Xsd_Elem_GBSeqFeatureSetTxsdGBSeqFeatureSet0031, bool) error
	Xsd_Elem_GBSeqAltSeqTxsdGBSeqAltSeq0034                            func(*Xsd_Elem_GBSeqAltSeqTxsdGBSeqAltSeq0034, bool) error
	Xsd_Elem_GBComment                                                 func(*Xsd_Elem_GBComment, bool) error
	Xsd_Elems_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074         func(*Xsd_Elems_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074, bool) error
	Xsd_Elems_GBFeaturePartial5TxsdGBFeaturePartial510060              func(*Xsd_Elems_GBFeaturePartial5TxsdGBFeaturePartial510060, bool) error
	TxsdGBSeqFeatureSet                                                func(*TxsdGBSeqFeatureSet, bool) error
	Xsd_Elems_GBAltSeqData                                             func(*Xsd_Elems_GBAltSeqData, bool) error
	TxsdGBSeq                                                          func(*TxsdGBSeq, bool) error
	Xsd_Elems_GBFeatureXrefsTxsdGBFeatureXrefs0063                     func(*Xsd_Elems_GBFeatureXrefsTxsdGBFeatureXrefs0063, bool) error
	Xsd_Elem_GBReferenceXrefTxsdGBReferenceXref0042                    func(*Xsd_Elem_GBReferenceXrefTxsdGBReferenceXref0042, bool) error
	Xsd_Elem_GBIntervalFromXsdtInteger0064                             func(*Xsd_Elem_GBIntervalFromXsdtInteger0064, bool) error
	Xsd_Elem_GBAltSeqItem                                              func(*Xsd_Elem_GBAltSeqItem, bool) error
	Xsd_Elems_GBSeqKeywordsTxsdGBSeqKeywords0018                       func(*Xsd_Elems_GBSeqKeywordsTxsdGBSeqKeywords0018, bool) error
	Xsd_Elems_GBReferenceXrefTxsdGBReferenceXref0042                   func(*Xsd_Elems_GBReferenceXrefTxsdGBReferenceXref0042, bool) error
	TxsdGBAltSeqDataItems                                              func(*TxsdGBAltSeqDataItems, bool) error
	Xsd_Elems_GBSeqStrandednessXsdtString0003                          func(*Xsd_Elems_GBSeqStrandednessXsdtString0003, bool) error
	Xsd_Elems_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055         func(*Xsd_Elems_GBFeatureSetFeaturesTxsdGBFeatureSetFeatures0055, bool) error
	Xsd_Elems_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016 func(*Xsd_Elems_GBSeqSecondaryAccessionsTxsdGBSeqSecondaryAccessions0016, bool) error
	TxsdGBSeqOtherSeqids                                               func(*TxsdGBSeqOtherSeqids, bool) error
	Xsd_Elem_GBReferencePositionXsdtString0037                         func(*Xsd_Elem_GBReferencePositionXsdtString0037, bool) error
	Xsd_Elems_GBSeqAltSeqTxsdGBSeqAltSeq0034                           func(*Xsd_Elems_GBSeqAltSeqTxsdGBSeqAltSeq0034, bool) error
	Xsd_Elems_GBSeqLocusXsdtString0001                                 func(*Xsd_Elems_GBSeqLocusXsdtString0001, bool) error
	Xsd_Elems_GBSeqDivisionXsdtString0006                              func(*Xsd_Elems_GBSeqDivisionXsdtString0006, bool) error
	Xsd_Elems_GBSeqTaxonomyXsdtString0022                              func(*Xsd_Elems_GBSeqTaxonomyXsdtString0022, bool) error
	Xsd_Elems_GBFeatureQualsTxsdGBFeatureQuals0062                     func(*Xsd_Elems_GBFeatureQualsTxsdGBFeatureQuals0062, bool) error
	Xsd_Elems_GBXrefDbnameXsdtString0045                               func(*Xsd_Elems_GBXrefDbnameXsdtString0045, bool) error
	Xsd_Elem_GBSeqDatabaseReferenceXsdtString0029                      func(*Xsd_Elem_GBSeqDatabaseReferenceXsdtString0029, bool) error
	Xsd_Elem_GBFeatureSet                                              func(*Xsd_Elem_GBFeatureSet, bool) error
	Xsd_Elems_GBFeaturePartial3TxsdGBFeaturePartial310061              func(*Xsd_Elems_GBFeaturePartial3TxsdGBFeaturePartial310061, bool) error
	TxsdGBAltSeqItemInterval                                           func(*TxsdGBAltSeqItemInterval, bool) error
	Xsd_Elems_GBSeqDefinitionXsdtString0011                            func(*Xsd_Elems_GBSeqDefinitionXsdtString0011, bool) error
	Xsd_Elems_GBIntervalIscompTxsdGBIntervalIscomp10067                func(*Xsd_Elems_GBIntervalIscompTxsdGBIntervalIscomp10067, bool) error
	Xsd_Elem_GBSeqEntryVersionXsdtString0013                           func(*Xsd_Elem_GBSeqEntryVersionXsdtString0013, bool) error
	Xsd_Elems_GBInterval                                               func(*Xsd_Elems_GBInterval, bool) error
	Xsd_Elem_GBSeqFeatureTableTxsdGBSeqFeatureTable0030                func(*Xsd_Elem_GBSeqFeatureTableTxsdGBSeqFeatureTable0030, bool) error
	Xsd_Elems_GBFeatureIntervalsTxsdGBFeatureIntervals0058             func(*Xsd_Elems_GBFeatureIntervalsTxsdGBFeatureIntervals0058, bool) error
	Xsd_Elems_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075              func(*Xsd_Elems_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075, bool) error
	Xsd_Elem_GBFeatureLocationXsdtString0057                           func(*Xsd_Elem_GBFeatureLocationXsdtString0057, bool) error
	TxsdGBAltSeqItem                                                   func(*TxsdGBAltSeqItem, bool) error
	Xsd_Elems_GBSeqCreateReleaseXsdtString0010                         func(*Xsd_Elems_GBSeqCreateReleaseXsdtString0010, bool) error
	Xsd_Elems_GBSeqLengthXsdtInteger0002                               func(*Xsd_Elems_GBSeqLengthXsdtInteger0002, bool) error
	Xsd_Elem_GBInterval                                                func(*Xsd_Elem_GBInterval, bool) error
	Xsd_Elems_GBReferencePubmedXsdtInteger0043                         func(*Xsd_Elems_GBReferencePubmedXsdtInteger0043, bool) error
	Xsd_Elems_GBSeqPrimaryXsdtString0027                               func(*Xsd_Elems_GBSeqPrimaryXsdtString0027, bool) error
	Xsd_Elems_GBStrucCommentItem                                       func(*Xsd_Elems_GBStrucCommentItem, bool) error
	Xsd_Elem_GBSeqProjectXsdtString0017                                func(*Xsd_Elem_GBSeqProjectXsdtString0017, bool) error
	TxsdGBIntervalIscomp1                                              func(*TxsdGBIntervalIscomp1, bool) error
	Xsd_Elems_GBSeq                                                    func(*Xsd_Elems_GBSeq, bool) error
	Xsd_Elems_GBSeqXrefsTxsdGBSeqXrefs0035                             func(*Xsd_Elems_GBSeqXrefsTxsdGBSeqXrefs0035, bool) error
	Xsd_Elems_GBReferenceTitleXsdtString0040                           func(*Xsd_Elems_GBReferenceTitleXsdtString0040, bool) error
	Xsd_Elems_GBAltSeqItemFirstAccnXsdtString0080                      func(*Xsd_Elems_GBAltSeqItemFirstAccnXsdtString0080, bool) error
	Xsd_Elem_GBReferenceAuthorsTxsdGBReferenceAuthors0038              func(*Xsd_Elem_GBReferenceAuthorsTxsdGBReferenceAuthors0038, bool) error
	Xsd_Elem_GBReferenceReferenceXsdtString0036                        func(*Xsd_Elem_GBReferenceReferenceXsdtString0036, bool) error
	Xsd_Elems_GBSeqDatabaseReferenceXsdtString0029                     func(*Xsd_Elems_GBSeqDatabaseReferenceXsdtString0029, bool) error
	Xsd_Elems_GBSeqFeatureTableTxsdGBSeqFeatureTable0030               func(*Xsd_Elems_GBSeqFeatureTableTxsdGBSeqFeatureTable0030, bool) error
	Xsd_Elem_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074          func(*Xsd_Elem_GBAltSeqItemIntervalTxsdGBAltSeqItemInterval0074, bool) error
	Xsd_Elems_GBAltSeqItem                                             func(*Xsd_Elems_GBAltSeqItem, bool) error
	Xsd_Elems_GBReferenceAuthorsTxsdGBReferenceAuthors0038             func(*Xsd_Elems_GBReferenceAuthorsTxsdGBReferenceAuthors0038, bool) error
	Xsd_Elem_GBSeqCommentXsdtString0024                                func(*Xsd_Elem_GBSeqCommentXsdtString0024, bool) error
	Xsd_Elems_GBComment                                                func(*Xsd_Elems_GBComment, bool) error
	Xsd_Elems_GBReference                                              func(*Xsd_Elems_GBReference, bool) error
	Xsd_Elem_GBSeqXrefsTxsdGBSeqXrefs0035                              func(*Xsd_Elem_GBSeqXrefsTxsdGBSeqXrefs0035, bool) error
	TxsdGBSeqAltSeq                                                    func(*TxsdGBSeqAltSeq, bool) error
	Xsd_Elems_GBSeqSegmentXsdtString0019                               func(*Xsd_Elems_GBSeqSegmentXsdtString0019, bool) error
	TxsdGBAltSeqItemIsgap1                                             func(*TxsdGBAltSeqItemIsgap1, bool) error
	Xsd_Elem_GBReference                                               func(*Xsd_Elem_GBReference, bool) error
	Xsd_Elems_GBStrucCommentItemValueXsdtString0052                    func(*Xsd_Elems_GBStrucCommentItemValueXsdtString0052, bool) error
	Xsd_Elems_GBAltSeqItemGapLinkageXsdtString0078                     func(*Xsd_Elems_GBAltSeqItemGapLinkageXsdtString0078, bool) error
	TxsdGBStrucCommentItem                                             func(*TxsdGBStrucCommentItem, bool) error
	TxsdGBStrucCommentItems                                            func(*TxsdGBStrucCommentItems, bool) error
	Xsd_Elem_GBSeqMoltypeXsdtString0004                                func(*Xsd_Elem_GBSeqMoltypeXsdtString0004, bool) error
	Xsd_Elem_GBFeatureIntervalsTxsdGBFeatureIntervals0058              func(*Xsd_Elem_GBFeatureIntervalsTxsdGBFeatureIntervals0058, bool) error
	Xsd_Elem_GBKeyword                                                 func(*Xsd_Elem_GBKeyword, bool) error
	TxsdGBReferenceXref                                                func(*TxsdGBReferenceXref, bool) error
	Xsd_Elem_GBIntervalToXsdtInteger0065                               func(*Xsd_Elem_GBIntervalToXsdtInteger0065, bool) error
	TxsdGBFeature                                                      func(*TxsdGBFeature, bool) error
	Xsd_Elem_GBAltSeqItemFirstAccnXsdtString0080                       func(*Xsd_Elem_GBAltSeqItemFirstAccnXsdtString0080, bool) error
	Xsd_Elem_GBSeqCreateDateXsdtString0008                             func(*Xsd_Elem_GBSeqCreateDateXsdtString0008, bool) error
	TxsdGBXref                                                         func(*TxsdGBXref, bool) error
	Xsd_Elems_GBSeqEntryVersionXsdtString0013                          func(*Xsd_Elems_GBSeqEntryVersionXsdtString0013, bool) error
	Xsd_Elem_GBReferenceRemarkXsdtString0044                           func(*Xsd_Elem_GBReferenceRemarkXsdtString0044, bool) error
	Xsd_Elem_GBIntervalAccessionXsdtString0069                         func(*Xsd_Elem_GBIntervalAccessionXsdtString0069, bool) error
	Xsd_Elem_GBAltSeqItemValueXsdtString0082                           func(*Xsd_Elem_GBAltSeqItemValueXsdtString0082, bool) error
	Xsd_Elems_GBCommentParagraph                                       func(*Xsd_Elems_GBCommentParagraph, bool) error
	Xsd_Elem_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075               func(*Xsd_Elem_GBAltSeqItemIsgapTxsdGBAltSeqItemIsgap10075, bool) error
	Xsd_Elems_GBSeqCommentXsdtString0024                               func(*Xsd_Elems_GBSeqCommentXsdtString0024, bool) error
	Xsd_Elems_GBSeqPrimaryAccessionXsdtString0012                      func(*Xsd_Elems_GBSeqPrimaryAccessionXsdtString0012, bool) error
	Xsd_Elems_GBCommentParagraphsTxsdGBCommentParagraphs0048           func(*Xsd_Elems_GBCommentParagraphsTxsdGBCommentParagraphs0048, bool) error
	Xsd_Elem_GBSeqDivisionXsdtString0006                               func(*Xsd_Elem_GBSeqDivisionXsdtString0006, bool) error
	Xsd_Elem_GBXrefDbnameXsdtString0045                                func(*Xsd_Elem_GBXrefDbnameXsdtString0045, bool) error
	Xsd_Elems_GBAltSeqItemGapCommentXsdtString0079                     func(*Xsd_Elems_GBAltSeqItemGapCommentXsdtString0079, bool) error
	Xsd_Elems_GBSeqAccessionVersionXsdtString0014                      func(*Xsd_Elems_GBSeqAccessionVersionXsdtString0014, bool) error
	Xsd_Elems_GBStrucComment                                           func(*Xsd_Elems_GBStrucComment, bool) error
	Xsd_Elems_GBSeqProjectXsdtString0017                               func(*Xsd_Elems_GBSeqProjectXsdtString0017, bool) error
	Xsd_Elems_GBCommentTypeXsdtString0047                              func(*Xsd_Elems_GBCommentTypeXsdtString0047, bool) error
	Xsd_Elem_GBAltSeqItemLastAccnXsdtString0081                        func(*Xsd_Elem_GBAltSeqItemLastAccnXsdtString0081, bool) error
	Xsd_Elem_GBSeqSourceXsdtString0020                                 func(*Xsd_Elem_GBSeqSourceXsdtString0020, bool) error
	Xsd_Elem_GBFeatureQualsTxsdGBFeatureQuals0062                      func(*Xsd_Elem_GBFeatureQualsTxsdGBFeatureQuals0062, bool) error
	Xsd_Elems_GBIntervalPointXsdtInteger0066                           func(*Xsd_Elems_GBIntervalPointXsdtInteger0066, bool) error
	TxsdGBSeqReferences                                                func(*TxsdGBSeqReferences, bool) error
	Xsd_Elems_GBAltSeqItemValueXsdtString0082                          func(*Xsd_Elems_GBAltSeqItemValueXsdtString0082, bool) error
	Xsd_Elems_GBFeatureLocationXsdtString0057                          func(*Xsd_Elems_GBFeatureLocationXsdtString0057, bool) error
	TxsdGBAltSeqData                                                   func(*TxsdGBAltSeqData, bool) error
	Xsd_Elem_GBStrucCommentItem                                        func(*Xsd_Elem_GBStrucCommentItem, bool) error
	TxsdGBReference                                                    func(*TxsdGBReference, bool) error
	Xsd_Elem_GBAltSeqItemGapLinkageXsdtString0078                      func(*Xsd_Elem_GBAltSeqItemGapLinkageXsdtString0078, bool) error
	Xsd_Elems_GBQualifierNameXsdtString0070                            func(*Xsd_Elems_GBQualifierNameXsdtString0070, bool) error
	Xsd_Elem_GBIntervalIscompTxsdGBIntervalIscomp10067                 func(*Xsd_Elem_GBIntervalIscompTxsdGBIntervalIscomp10067, bool) error
	Xsd_Elem_GBIntervalInterbpTxsdGBIntervalInterbp10068               func(*Xsd_Elem_GBIntervalInterbpTxsdGBIntervalInterbp10068, bool) error
	Xsd_Elem_GBAltSeqData                                              func(*Xsd_Elem_GBAltSeqData, bool) error
	Xsd_Elems_GBReferencePositionXsdtString0037                        func(*Xsd_Elems_GBReferencePositionXsdtString0037, bool) error
	Xsd_Elem_GBReferenceTitleXsdtString0040                            func(*Xsd_Elem_GBReferenceTitleXsdtString0040, bool) error
	Xsd_Elem_GBSeqStrandednessXsdtString0003                           func(*Xsd_Elem_GBSeqStrandednessXsdtString0003, bool) error
	Xsd_Elem_GBQualifier                                               func(*Xsd_Elem_GBQualifier, bool) error
	Xsd_Elems_GBReferenceJournalXsdtString0041                         func(*Xsd_Elems_GBReferenceJournalXsdtString0041, bool) error
	Xsd_Elem_GBStrucCommentItemValueXsdtString0052                     func(*Xsd_Elem_GBStrucCommentItemValueXsdtString0052, bool) error
	Xsd_Elem_GBReferenceJournalXsdtString0041                          func(*Xsd_Elem_GBReferenceJournalXsdtString0041, bool) error
	Xsd_Elem_GBSeqUpdateReleaseXsdtString0009                          func(*Xsd_Elem_GBSeqUpdateReleaseXsdtString0009, bool) error
	TxsdGBIntervalInterbp1                                             func(*TxsdGBIntervalInterbp1, bool) error
	TxsdGBFeatureQuals                                                 func(*TxsdGBFeatureQuals, bool) error
	Xsd_Elem_GBAltSeqItemGapTypeXsdtString0077                         func(*Xsd_Elem_GBAltSeqItemGapTypeXsdtString0077, bool) error
	Xsd_Elem_GBAuthor                                                  func(*Xsd_Elem_GBAuthor, bool) error
	Xsd_Elem_GBFeature                                                 func(*Xsd_Elem_GBFeature, bool) error
	Xsd_Elems_GBIntervalInterbpTxsdGBIntervalInterbp10068              func(*Xsd_Elems_GBIntervalInterbpTxsdGBIntervalInterbp10068, bool) error
	Xsd_Elems_GBSeqMoltypeXsdtString0004                               func(*Xsd_Elems_GBSeqMoltypeXsdtString0004, bool) error
	Xsd_Elems_GBFeatureSetAnnotSourceXsdtString0054                    func(*Xsd_Elems_GBFeatureSetAnnotSourceXsdtString0054, bool) error
	Xsd_Elem_GBSeqPrimaryAccessionXsdtString0012                       func(*Xsd_Elem_GBSeqPrimaryAccessionXsdtString0012, bool) error
	Xsd_Elem_GBReferencePubmedXsdtInteger0043                          func(*Xsd_Elem_GBReferencePubmedXsdtInteger0043, bool) error
	Xsd_Elem_GBSeqKeywordsTxsdGBSeqKeywords0018                        func(*Xsd_Elem_GBSeqKeywordsTxsdGBSeqKeywords0018, bool) error
	TxsdGBQualifier                                                    func(*TxsdGBQualifier, bool) error
	Xsd_Elem_GBFeatureXrefsTxsdGBFeatureXrefs0063                      func(*Xsd_Elem_GBFeatureXrefsTxsdGBFeatureXrefs0063, bool) error
	Xsd_Elem_GBSeqPrimaryXsdtString0027                                func(*Xsd_Elem_GBSeqPrimaryXsdtString0027, bool) error
	Xsd_Elems_GBXrefIdXsdtString0046                                   func(*Xsd_Elems_GBXrefIdXsdtString0046, bool) error
	Xsd_Elems_GBReferenceReferenceXsdtString0036                       func(*Xsd_Elems_GBReferenceReferenceXsdtString0036, bool) error
	Xsd_Elems_GBSeqid                                                  func(*Xsd_Elems_GBSeqid, bool) error
	Xsd_Elem_GBSeqSequenceXsdtString0032                               func(*Xsd_Elem_GBSeqSequenceXsdtString0032, bool) error
	Xsd_Elem_GBIntervalPointXsdtInteger0066                            func(*Xsd_Elem_GBIntervalPointXsdtInteger0066, bool) error
	Xsd_Elem_GBSeqUpdateDateXsdtString0007                             func(*Xsd_Elem_GBSeqUpdateDateXsdtString0007, bool) error
}
